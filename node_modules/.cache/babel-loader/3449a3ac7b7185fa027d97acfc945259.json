{"ast":null,"code":"(function () {\n  'use strict';\n\n  var compoundSubject = function (arrayOfStrings) {\n    var wrapperObject = {},\n        endWith = 'and',\n        delimitAll = false,\n        delimitWith = ',';\n\n    wrapperObject.endWith = function (newEndWith) {\n      if (typeof newEndWith !== 'string') {\n        return wrapperObject;\n      }\n\n      endWith = newEndWith;\n      return wrapperObject;\n    };\n\n    wrapperObject.delimitAll = function\n      /*newDelimitAll*/\n    () {\n      var newDelimitAll = arguments[0];\n\n      if (typeof newDelimitAll === 'boolean') {\n        delimitAll = newDelimitAll;\n      } else {\n        delimitAll = true;\n      }\n\n      return wrapperObject;\n    };\n\n    wrapperObject.delimitWith = function (newDelimitWith) {\n      if (typeof newDelimitWith !== 'string') {\n        return wrapperObject;\n      }\n\n      delimitWith = newDelimitWith;\n      return wrapperObject;\n    };\n\n    wrapperObject.make = function () {\n      var combinedEndWith = delimitAll ? delimitWith + ' ' + endWith + ' ' : ' ' + endWith + ' ',\n          upToLastTwo,\n          lastTwo;\n\n      if (typeof arrayOfStrings === 'undefined' || !arrayOfStrings instanceof Array) {\n        return '';\n      }\n\n      upToLastTwo = arrayOfStrings.slice(0, -2).join(delimitWith + ' ');\n      lastTwo = arrayOfStrings.slice(arrayOfStrings.length - 2).join(combinedEndWith);\n\n      if (!upToLastTwo.length) {\n        return lastTwo;\n      }\n\n      return upToLastTwo + delimitWith + ' ' + lastTwo;\n    };\n\n    return wrapperObject;\n  }; // Node\n\n\n  if (typeof module !== 'undefined') {\n    module.exports = compoundSubject;\n  } // Browser\n  else if (typeof window !== 'undefined') {\n    window.compoundSubject = compoundSubject;\n  } else {\n    throw new Error('Couldn\\'t find a suitable scope in which to define compoundSubject');\n  }\n})();","map":{"version":3,"sources":["/Users/komalfulwar/Downloads/candy-machine-ui/node_modules/compound-subject/compound-subject.js"],"names":["compoundSubject","arrayOfStrings","wrapperObject","endWith","delimitAll","delimitWith","newEndWith","newDelimitAll","arguments","newDelimitWith","make","combinedEndWith","upToLastTwo","lastTwo","Array","slice","join","length","module","exports","window","Error"],"mappings":"AAAA,CAAC,YAAY;AAGZ;;AAGA,MAAIA,eAAe,GAAG,UAAUC,cAAV,EAA0B;AAG/C,QAAIC,aAAa,GAAG,EAApB;AAAA,QACCC,OAAO,GAAG,KADX;AAAA,QAECC,UAAU,GAAG,KAFd;AAAA,QAGCC,WAAW,GAAG,GAHf;;AAMAH,IAAAA,aAAa,CAACC,OAAd,GAAwB,UAAUG,UAAV,EAAsB;AAE7C,UAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AACnC,eAAOJ,aAAP;AACA;;AAEDC,MAAAA,OAAO,GAAGG,UAAV;AAEA,aAAOJ,aAAP;AAEA,KAVD;;AAaAA,IAAAA,aAAa,CAACE,UAAd,GAA2B;AAAU;AAAV,OAA6B;AAEvD,UAAIG,aAAa,GAAGC,SAAS,CAAC,CAAD,CAA7B;;AAEA,UAAI,OAAOD,aAAP,KAAyB,SAA7B,EAAwC;AACvCH,QAAAA,UAAU,GAAGG,aAAb;AACA,OAFD,MAIK;AACJH,QAAAA,UAAU,GAAG,IAAb;AACA;;AAED,aAAOF,aAAP;AAEA,KAdD;;AAiBAA,IAAAA,aAAa,CAACG,WAAd,GAA4B,UAAUI,cAAV,EAA0B;AAErD,UAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AACvC,eAAOP,aAAP;AACA;;AAEDG,MAAAA,WAAW,GAAGI,cAAd;AAEA,aAAOP,aAAP;AAEA,KAVD;;AAaAA,IAAAA,aAAa,CAACQ,IAAd,GAAqB,YAAY;AAEhC,UAAIC,eAAe,GAAGP,UAAU,GAAGC,WAAW,GAAG,GAAd,GAAoBF,OAApB,GAA8B,GAAjC,GAAuC,MAAMA,OAAN,GAAgB,GAAvF;AAAA,UACCS,WADD;AAAA,UAECC,OAFD;;AAIA,UAAI,OAAOZ,cAAP,KAA0B,WAA1B,IAAyC,CAACA,cAAD,YAA2Ba,KAAxE,EAA+E;AAC9E,eAAO,EAAP;AACA;;AAEDF,MAAAA,WAAW,GAAGX,cAAc,CAC1Bc,KADY,CACN,CADM,EACH,CAAC,CADE,EAEZC,IAFY,CAEPX,WAAW,GAAG,GAFP,CAAd;AAIAQ,MAAAA,OAAO,GAAGZ,cAAc,CACtBc,KADQ,CACFd,cAAc,CAACgB,MAAf,GAAwB,CADtB,EAERD,IAFQ,CAEHL,eAFG,CAAV;;AAIA,UAAI,CAACC,WAAW,CAACK,MAAjB,EAAyB;AACxB,eAAOJ,OAAP;AACA;;AAED,aAAOD,WAAW,GAAGP,WAAd,GAA4B,GAA5B,GAAkCQ,OAAzC;AAEA,KAxBD;;AA2BA,WAAOX,aAAP;AAGA,GAlFD,CANY,CA2FZ;;;AACA,MAAI,OAAOgB,MAAP,KAAkB,WAAtB,EAAmC;AAClCA,IAAAA,MAAM,CAACC,OAAP,GAAiBnB,eAAjB;AACA,GAFD,CAIA;AAJA,OAKK,IAAI,OAAOoB,MAAP,KAAkB,WAAtB,EAAmC;AACvCA,IAAAA,MAAM,CAACpB,eAAP,GAAyBA,eAAzB;AACA,GAFI,MAIA;AACJ,UAAM,IAAIqB,KAAJ,CAAU,oEAAV,CAAN;AACA;AAGD,CA1GD","sourcesContent":["(function () {\n\n\n\t'use strict';\n\n\n\tvar compoundSubject = function (arrayOfStrings) {\n\n\n\t\tvar wrapperObject = {},\n\t\t\tendWith = 'and',\n\t\t\tdelimitAll = false,\n\t\t\tdelimitWith = ',';\n\n\n\t\twrapperObject.endWith = function (newEndWith) {\n\n\t\t\tif (typeof newEndWith !== 'string') {\n\t\t\t\treturn wrapperObject;\n\t\t\t}\n\n\t\t\tendWith = newEndWith;\n\n\t\t\treturn wrapperObject;\n\n\t\t};\n\n\n\t\twrapperObject.delimitAll = function (/*newDelimitAll*/) {\n\n\t\t\tvar newDelimitAll = arguments[0];\n\n\t\t\tif (typeof newDelimitAll === 'boolean') {\n\t\t\t\tdelimitAll = newDelimitAll;\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tdelimitAll = true;\n\t\t\t}\n\n\t\t\treturn wrapperObject;\n\n\t\t};\n\n\n\t\twrapperObject.delimitWith = function (newDelimitWith) {\n\n\t\t\tif (typeof newDelimitWith !== 'string') {\n\t\t\t\treturn wrapperObject;\n\t\t\t}\n\n\t\t\tdelimitWith = newDelimitWith;\n\n\t\t\treturn wrapperObject;\n\n\t\t};\n\n\n\t\twrapperObject.make = function () {\n\n\t\t\tvar combinedEndWith = delimitAll ? delimitWith + ' ' + endWith + ' ' : ' ' + endWith + ' ',\n\t\t\t\tupToLastTwo,\n\t\t\t\tlastTwo;\n\n\t\t\tif (typeof arrayOfStrings === 'undefined' || !arrayOfStrings instanceof Array) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tupToLastTwo = arrayOfStrings\n\t\t\t\t.slice(0, -2)\n\t\t\t\t.join(delimitWith + ' ');\n\n\t\t\tlastTwo = arrayOfStrings\n\t\t\t\t.slice(arrayOfStrings.length - 2)\n\t\t\t\t.join(combinedEndWith);\t\t\t\t\n\n\t\t\tif (!upToLastTwo.length) {\n\t\t\t\treturn lastTwo;\n\t\t\t}\n\n\t\t\treturn upToLastTwo + delimitWith + ' ' + lastTwo;\n\n\t\t};\n\n\n\t\treturn wrapperObject;\n\n\n\t};\n\n\n\t// Node\n\tif (typeof module !== 'undefined') {\n\t\tmodule.exports = compoundSubject;\n\t}\n\n\t// Browser\n\telse if (typeof window !== 'undefined') {\n\t\twindow.compoundSubject = compoundSubject;\n\t}\n\n\telse {\n\t\tthrow new Error('Couldn\\'t find a suitable scope in which to define compoundSubject');\n\t}\n\n\n})();\n"]},"metadata":{},"sourceType":"script"}