{"ast":null,"code":"var _jsxFileName = \"/Users/komalfulwar/Downloads/candy-machine-ui/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, getCandyMachineState, mintOneToken } from './candy-machine';\nimport { toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport Body from './components/body/body';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(token);\n            let valid = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(valid);\n            active = presale && valid || active;\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey))[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, true);\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success'\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the lastest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        marginTop: 100\n      },\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"xs\",\n        style: {\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6\n          },\n          children: !wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              justifyContent: \"center\",\n              wrap: \"nowrap\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 3,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"textSecondary\",\n                  children: \"Remaining\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  color: \"textPrimary\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: `${itemsRemaining}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 4,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"textSecondary\",\n                  children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  color: \"textPrimary\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 5,\n                children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                    date: getCountdownDate(candyMachine),\n                    style: {\n                      justifyContent: 'flex-end'\n                    },\n                    status: \"COMPLETED\",\n                    onComplete: toggleMintButton\n                  }, \"endSettings\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 343,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    align: \"center\",\n                    display: \"block\",\n                    style: {\n                      fontWeight: 'bold'\n                    },\n                    children: \"TO END OF MINT\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                    date: getCountdownDate(candyMachine),\n                    style: {\n                      justifyContent: 'flex-end'\n                    },\n                    status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? 'COMPLETED' : isPresale ? 'PRESALE' : 'LIVE',\n                    onComplete: toggleMintButton\n                  }, \"goLive\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 25\n                  }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    align: \"center\",\n                    display: \"block\",\n                    style: {\n                      fontWeight: 'bold'\n                    },\n                    children: \"UNTIL PUBLIC MINT\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n              children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                wallet: {\n                  publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                  //@ts-ignore\n                  signTransaction: wallet.signTransaction\n                },\n                gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n                clusterUrl: rpcUrl,\n                options: {\n                  autoShowModal: false\n                },\n                children: /*#__PURE__*/_jsxDEV(MintButton, {\n                  candyMachine: candyMachine,\n                  isMinting: isUserMinting,\n                  onMint: onMint,\n                  isActive: isActive || isPresale && isWhitelistUser\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                onMint: onMint,\n                isActive: isActive || isPresale && isWhitelistUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: alertState.open,\n        autoHideDuration: 6000,\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => setAlertState({ ...alertState,\n            open: false\n          }),\n          severity: alertState.severity,\n          children: alertState.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"Bn+rKTpigYLrNgoFTRMpfaPiCm8=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/Users/komalfulwar/Downloads/candy-machine-ui/src/Home.tsx"],"names":["useEffect","useMemo","useState","useCallback","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","getCandyMachineState","mintOneToken","toDate","formatNumber","getAtaForMint","MintCountdown","MintButton","GatewayProvider","Body","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","candyMachineId","cndy","connection","active","state","goLiveDate","toNumber","Date","getTime","presale","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","valid","parseInt","value","amount","e","console","log","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","onMint","document","getElementById","click","connected","program","mintTxId","status","err","txTimeout","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","price","getCountdownDate","justifyContent","gatekeeper","gatekeeperNetwork","autoShowModal","BN"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport Header from './header/Header';\nimport Body from './components/body/body';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n\n    <><Body /><Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                          candyMachine.state.price\n                        )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton} />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                            ? 'COMPLETED'\n                            : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'}\n                          onComplete={toggleMintButton} />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                          new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey: wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={candyMachine?.state?.gatekeeper?.gatekeeperNetwork}\n                    clusterUrl={rpcUrl}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)} />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    onMint={onMint}\n                    isActive={isActive || (isPresale && isWhitelistUser)} />\n                )}\n              </MintContainer>\n            </>\n          )}\n          {/* <Typography\n      variant=\"caption\"\n      align=\"center\"\n      display=\"block\"\n      style={{ marginTop: 7, color: 'grey' }}\n    >\n      Powered by METAPLEX\n    </Typography> */}\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container></>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}