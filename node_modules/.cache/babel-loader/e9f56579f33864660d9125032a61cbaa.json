{"ast":null,"code":"import { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class InstructionNamespaceFactory {\n  static build(idlIx, encodeFn, programId) {\n    if (idlIx.name === \"_inner\") {\n      throw new IdlError(\"the _inner name is reserved\");\n    }\n\n    const ix = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      validateAccounts(idlIx.accounts, ctx.accounts);\n      validateInstruction(idlIx, ...args);\n      const keys = ix.accounts(ctx.accounts);\n\n      if (ctx.remainingAccounts !== undefined) {\n        keys.push(...ctx.remainingAccounts);\n      }\n\n      if (ctx.__private && ctx.__private.logAccounts) {\n        console.log(\"Outgoing account metas:\", keys);\n      }\n\n      return new TransactionInstruction({\n        keys,\n        programId,\n        data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs))\n      });\n    }; // Utility fn for ordering the accounts for this instruction.\n\n\n    ix[\"accounts\"] = function () {\n      let accs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n    };\n\n    return ix;\n  }\n\n  static accountsArray(ctx, accounts) {\n    return accounts.map(acc => {\n      // Nested accounts.\n      const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n\n      if (nestedAccounts !== undefined) {\n        const rpcAccs = ctx[acc.name];\n        return InstructionNamespaceFactory.accountsArray(rpcAccs, nestedAccounts).flat();\n      } else {\n        const account = acc;\n        return {\n          pubkey: translateAddress(ctx[acc.name]),\n          isWritable: account.isMut,\n          isSigner: account.isSigner\n        };\n      }\n    }).flat();\n  }\n\n} // Throws error if any argument required for the `ix` is not given.\n\nfunction validateInstruction(ix) {// todo\n}","map":{"version":3,"mappings":"AAAA,SAGEA,sBAHF,QAIO,iBAJP;AAMA,SAASC,QAAT,QAAyB,aAAzB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,gBAHF,QAKO,WALP;AAMA,SAAmBC,eAAnB,QAA0C,YAA1C;AAEA,eAAc,MAAOC,2BAAP,CAAkC;AAC3B,SAALC,KAAK,CACjBC,KADiB,EAEjBC,QAFiB,EAGjBC,SAHiB,EAGG;AAEpB,QAAIF,KAAK,CAACG,IAAN,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIV,QAAJ,CAAa,6BAAb,CAAN;AACD;;AAED,UAAMW,EAAE,GAAG,YAA2C;AAAA,wCAAvCC,IAAuC;AAAvCA,YAAuC;AAAA;;AACpD,YAAM,CAACC,MAAD,EAASC,GAAT,IAAgBV,eAAe,CAACG,KAAD,EAAQ,CAAC,GAAGK,IAAJ,CAAR,CAArC;AACAV,sBAAgB,CAACK,KAAK,CAACQ,QAAP,EAAiBD,GAAG,CAACC,QAArB,CAAhB;AACAC,yBAAmB,CAACT,KAAD,EAAQ,GAAGK,IAAX,CAAnB;AAEA,YAAMK,IAAI,GAAGN,EAAE,CAACI,QAAH,CAAYD,GAAG,CAACC,QAAhB,CAAb;;AAEA,UAAID,GAAG,CAACI,iBAAJ,KAA0BC,SAA9B,EAAyC;AACvCF,YAAI,CAACG,IAAL,CAAU,GAAGN,GAAG,CAACI,iBAAjB;AACD;;AAED,UAAIJ,GAAG,CAACO,SAAJ,IAAiBP,GAAG,CAACO,SAAJ,CAAcC,WAAnC,EAAgD;AAC9CC,eAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCP,IAAvC;AACD;;AACD,aAAO,IAAIlB,sBAAJ,CAA2B;AAChCkB,YADgC;AAEhCR,iBAFgC;AAGhCgB,YAAI,EAAEjB,QAAQ,CAACD,KAAK,CAACG,IAAP,EAAaT,aAAa,CAACM,KAAD,EAAQ,GAAGM,MAAX,CAA1B;AAHkB,OAA3B,CAAP;AAKD,KAnBD,CANoB,CA2BpB;;;AACAF,MAAE,CAAC,UAAD,CAAF,GAAiB,YAAwB;AAAA,UAAvBe,IAAuB,uEAAN,EAAM;AACvC,aAAOrB,2BAA2B,CAACsB,aAA5B,CAA0CD,IAA1C,EAAgDnB,KAAK,CAACQ,QAAtD,CAAP;AACD,KAFD;;AAIA,WAAOJ,EAAP;AACD;;AAE0B,SAAbgB,aAAa,CACzBb,GADyB,EAEzBC,QAFyB,EAEC;AAE1B,WAAOA,QAAQ,CACZa,GADI,CACCC,GAAD,IAAwB;AAC3B;AACA,YAAMC,cAAc,GAClB,cAAcD,GAAd,GAAoBA,GAAG,CAACd,QAAxB,GAAmCI,SADrC;;AAEA,UAAIW,cAAc,KAAKX,SAAvB,EAAkC;AAChC,cAAMY,OAAO,GAAGjB,GAAG,CAACe,GAAG,CAACnB,IAAL,CAAnB;AACA,eAAOL,2BAA2B,CAACsB,aAA5B,CACLI,OADK,EAELD,cAFK,EAGLE,IAHK,EAAP;AAID,OAND,MAMO;AACL,cAAMC,OAAO,GAAeJ,GAA5B;AACA,eAAO;AACLK,gBAAM,EAAE/B,gBAAgB,CAACW,GAAG,CAACe,GAAG,CAACnB,IAAL,CAAJ,CADnB;AAELyB,oBAAU,EAAEF,OAAO,CAACG,KAFf;AAGLC,kBAAQ,EAAEJ,OAAO,CAACI;AAHb,SAAP;AAKD;AACF,KAnBI,EAoBJL,IApBI,EAAP;AAqBD;;AAhE6C,C,CAgHhD;;AACA,SAAShB,mBAAT,CAA6BL,EAA7B,EAA+D,CAC7D;AACD","names":["TransactionInstruction","IdlError","toInstruction","validateAccounts","translateAddress","splitArgsAndCtx","InstructionNamespaceFactory","build","idlIx","encodeFn","programId","name","ix","args","ixArgs","ctx","accounts","validateInstruction","keys","remainingAccounts","undefined","push","__private","logAccounts","console","log","data","accs","accountsArray","map","acc","nestedAccounts","rpcAccs","flat","account","pubkey","isWritable","isMut","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}