{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst config_1 = require(\"../solana/config\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst useChain_1 = __importDefault(require(\"./useChain\"));\n\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst actionCreator_1 = require(\"../actionCreator\");\n\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\n\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\n\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\n\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\n\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\n\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\n\n\nconst useOrchestration = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    stage,\n    chainImplementation,\n    gatekeeperClient\n  } = _ref;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  const gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n  const {\n    gatewayToken,\n    walletToRefresh,\n    civicPass,\n    refreshTokenState,\n    gatewayStatus,\n    gatekeeperNetworkAddress,\n    ownerSigns,\n    renderIframe,\n    refreshTimeoutId\n  } = state;\n  const networkConfig = (0, networkConfig_1.default)({\n    gatekeeperNetworkAddress,\n    stage\n  }); // Register our hooks here\n\n  const {\n    waitForConfirmPOWO,\n    waitForPOWO,\n    waitForHandleTransaction\n  } = (0, usePOWO_1.default)({\n    wallet,\n    chainImplementation\n  }, state, dispatch);\n  const {\n    waitForGatekeeperIssuanceRequest\n  } = (0, useGatekeeper_1.default)({\n    wallet,\n    stage,\n    gatekeeperClient\n  }, state, dispatch);\n  const {\n    checkForRefreshWithTimeout,\n    refreshToken,\n    waitForUnexpiredGatewayToken\n  } = (0, useRefresh_1.default)({\n    stage,\n    gatekeeperClient,\n    networkConfig\n  }, state, dispatch);\n  (0, useCivicPass_1.default)({\n    wallet\n  }, state, dispatch);\n  (0, useCivicPassEventListener_1.default)({\n    wallet,\n    chainImplementation\n  });\n  (0, useChain_1.default)({\n    wallet,\n    chainImplementation,\n    networkConfig\n  }, state, dispatch);\n  (0, useGatekeeperRecord_1.default)({\n    wallet,\n    gatekeeperClient,\n    httpConfig: chainImplementation.httpConfig,\n    networkConfig\n  }, state, dispatch);\n  /**\n   * Refresh Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * wait until we have a payload that has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n      logger_1.default.debug('Refresh payload...', {\n        refreshPayload,\n        refreshPayloadState: refreshPayload === undefined\n      });\n\n      if (refreshPayload !== undefined) {\n        logger_1.default.debug('Refreshing token...');\n        resolve(refreshPayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * When we have a token start check the next expiration so we can prompt the user to refresh\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatewayStatus === types_1.GatewayStatus.ACTIVE || refreshTokenState === types_1.RefreshTokenState.COMPLETED) {\n      logger_1.default.debug('Start polling for the refresh interval');\n      checkForRefreshWithTimeout(wallet);\n    }\n  }, [gatewayStatus, refreshTokenState, wallet, renderIframe]);\n  /**\n   * Whenever the iFrame is rendered, clear the timeout\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (renderIframe && refreshTimeoutId) {\n      clearTimeout(refreshTimeoutId);\n      dispatch({\n        type: 'refresh_clear_timeout'\n      });\n    }\n  }, [renderIframe, refreshTimeoutId]);\n  /**\n   * Issuance Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * poll until a gatekeeper record is found, once active check the chain for a token\n   * then dispatch a tokenChange event that will result in the token getting saved to state\n   * start token refresh polling once a valid token is set\n   */\n\n  const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n    if (wallet) {\n      logger_1.default.debug('waitForOnChainToken');\n      const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n        wallet,\n        chainImplementation,\n        gatekeeperClient,\n        dispatch,\n        networkConfig\n      });\n      await actionCreator.waitForGatewayToken();\n    }\n\n    return null;\n  }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n  /**\n   * wait until a presentation request id has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n      logger_1.default.debug('Issuance payload...', issuancePayload);\n\n      if (issuancePayload !== undefined) {\n        resolve(issuancePayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  const checkForRequiredProof = (0, react_1.useCallback)(async _ref2 => {\n    let {\n      requiresProofOfWalletOwnership,\n      payload\n    } = _ref2;\n    logger_1.default.debug('Checking for required proof', {\n      requiresProofOfWalletOwnership,\n      payload\n    });\n\n    if (requiresProofOfWalletOwnership) {\n      const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n      return result;\n    }\n\n    return {\n      payload\n    };\n  }, [waitForConfirmPOWO, waitForPOWO]);\n  /**\n   * New token request flow:\n   * wait for the user to request a new token\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to request a new token issuance\n   * wait for a gatekeeper record to be created\n   * once this flow is complete a new Gatekeeper token should be available and set in state\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (!ownerSigns) {\n      waitForCivicPassIssuanceResponsePayload().then(checkForRequiredProof).then(waitForGatekeeperIssuanceRequest).then(waitForOnChainToken).then(() => checkForRefreshWithTimeout(wallet)).catch(error => {\n        dispatch({\n          type: 'civicPass_issuance_failure'\n        });\n        logger_1.default.error('ERROR newTokenRequestFlow', error);\n      });\n    }\n  }, [waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken, ownerSigns]);\n  (0, react_1.useEffect)(() => {\n    if (ownerSigns) {\n      waitForCivicPassIssuanceResponsePayload().then(waitForGatekeeperIssuanceRequest).then(waitForHandleTransaction).then(waitForOnChainToken).then(() => checkForRefreshWithTimeout(wallet)).catch(error => {\n        dispatch({\n          type: 'civicPass_issuance_failure'\n        });\n        logger_1.default.error('ERROR newTokenRequestFlow', error);\n      });\n    }\n  }, [waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken, ownerSigns]);\n  /**\n   * Refresh start flow:\n   * Triggered when we have a refreshResponse payload\n   * wait refresh to be triggered from the iFrame\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to refresh the token\n   * check if token is expired and timeout if token does not update within timeframe\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (!ownerSigns) {\n      const useWallet = walletToRefresh || wallet;\n      waitForCivicPassRefreshResponsePayload().then(checkForRequiredProof).then(refreshToken(useWallet)).then(waitForUnexpiredGatewayToken).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, ownerSigns]);\n  (0, react_1.useEffect)(() => {\n    if (ownerSigns) {\n      const useWallet = walletToRefresh || wallet;\n      waitForCivicPassRefreshResponsePayload().then(refreshToken(useWallet)).then(waitForHandleTransaction).then(waitForUnexpiredGatewayToken).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, walletToRefresh, wallet, ownerSigns]);\n  /**\n   * Refresh complete flow:\n   * Triggered by token change event\n   * Check the refresh token state\n   * Check if token is unexpired and clear timeout if token is not expired\n   * Complete the refresh event and clear the refresh response payload\n   */\n\n  (0, react_1.useEffect)(() => {\n    const useWallet = walletToRefresh || wallet;\n\n    if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n      waitForUnexpiredGatewayToken().then(() => checkForRefreshWithTimeout(useWallet)).then(() => {\n        dispatch({\n          type: 'refresh_complete'\n        });\n      }).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_failed'\n        });\n      });\n    }\n  }, [gatewayToken, refreshTokenState, walletToRefresh, wallet]);\n};\n\nexports.default = useOrchestration;","map":{"version":3,"sources":["/Users/komalfulwar/Downloads/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useOrchestration.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","config_1","logger_1","types_1","useChain_1","useRefresh_1","useWalletHooks_1","actionCreator_1","usePOWO_1","useGatekeeper_1","useGatekeeperRecord_1","networkConfig_1","useCivicPass_1","useCivicPassEventListener_1","useOrchestration","state","dispatch","wallet","stage","chainImplementation","gatekeeperClient","expectWalletConnected","default","gatekeeperEndpoint","getGatekeeperEndpoint","gatewayToken","walletToRefresh","civicPass","refreshTokenState","gatewayStatus","gatekeeperNetworkAddress","ownerSigns","renderIframe","refreshTimeoutId","networkConfig","waitForConfirmPOWO","waitForPOWO","waitForHandleTransaction","waitForGatekeeperIssuanceRequest","checkForRefreshWithTimeout","refreshToken","waitForUnexpiredGatewayToken","httpConfig","waitForCivicPassRefreshResponsePayload","useCallback","debug","result","Promise","resolve","responsePayload","refreshPayload","CivicPassMessageAction","REFRESH","refreshPayloadState","undefined","useEffect","GatewayStatus","ACTIVE","RefreshTokenState","COMPLETED","clearTimeout","type","waitForOnChainToken","actionCreator","gatewayTokenActionCreator","waitForGatewayToken","waitForCivicPassIssuanceResponsePayload","issuancePayload","ISSUANCE","checkForRequiredProof","requiresProofOfWalletOwnership","payload","then","catch","error","useWallet","WAIT_FOR_ON_CHAIN"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst config_1 = require(\"../solana/config\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst useChain_1 = __importDefault(require(\"./useChain\"));\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst actionCreator_1 = require(\"../actionCreator\");\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\nconst useOrchestration = ({ wallet, stage, chainImplementation, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n    const { gatewayToken, walletToRefresh, civicPass, refreshTokenState, gatewayStatus, gatekeeperNetworkAddress, ownerSigns, renderIframe, refreshTimeoutId, } = state;\n    const networkConfig = (0, networkConfig_1.default)({ gatekeeperNetworkAddress, stage });\n    // Register our hooks here\n    const { waitForConfirmPOWO, waitForPOWO, waitForHandleTransaction } = (0, usePOWO_1.default)({ wallet, chainImplementation }, state, dispatch);\n    const { waitForGatekeeperIssuanceRequest } = (0, useGatekeeper_1.default)({ wallet, stage, gatekeeperClient }, state, dispatch);\n    const { checkForRefreshWithTimeout, refreshToken, waitForUnexpiredGatewayToken } = (0, useRefresh_1.default)({ stage, gatekeeperClient, networkConfig }, state, dispatch);\n    (0, useCivicPass_1.default)({ wallet }, state, dispatch);\n    (0, useCivicPassEventListener_1.default)({ wallet, chainImplementation });\n    (0, useChain_1.default)({ wallet, chainImplementation, networkConfig }, state, dispatch);\n    (0, useGatekeeperRecord_1.default)({ wallet, gatekeeperClient, httpConfig: chainImplementation.httpConfig, networkConfig }, state, dispatch);\n    /**\n     * Refresh Flows ----------------------------------------------------------------\n     */\n    /**\n     * wait until we have a payload that has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n            logger_1.default.debug('Refresh payload...', {\n                refreshPayload,\n                refreshPayloadState: refreshPayload === undefined,\n            });\n            if (refreshPayload !== undefined) {\n                logger_1.default.debug('Refreshing token...');\n                resolve(refreshPayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * When we have a token start check the next expiration so we can prompt the user to refresh\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatewayStatus === types_1.GatewayStatus.ACTIVE || refreshTokenState === types_1.RefreshTokenState.COMPLETED) {\n            logger_1.default.debug('Start polling for the refresh interval');\n            checkForRefreshWithTimeout(wallet);\n        }\n    }, [gatewayStatus, refreshTokenState, wallet, renderIframe]);\n    /**\n     * Whenever the iFrame is rendered, clear the timeout\n     */\n    (0, react_1.useEffect)(() => {\n        if (renderIframe && refreshTimeoutId) {\n            clearTimeout(refreshTimeoutId);\n            dispatch({ type: 'refresh_clear_timeout' });\n        }\n    }, [renderIframe, refreshTimeoutId]);\n    /**\n     * Issuance Flows ----------------------------------------------------------------\n     */\n    /**\n     * poll until a gatekeeper record is found, once active check the chain for a token\n     * then dispatch a tokenChange event that will result in the token getting saved to state\n     * start token refresh polling once a valid token is set\n     */\n    const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n        if (wallet) {\n            logger_1.default.debug('waitForOnChainToken');\n            const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n                wallet,\n                chainImplementation,\n                gatekeeperClient,\n                dispatch,\n                networkConfig,\n            });\n            await actionCreator.waitForGatewayToken();\n        }\n        return null;\n    }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n    /**\n     * wait until a presentation request id has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n            logger_1.default.debug('Issuance payload...', issuancePayload);\n            if (issuancePayload !== undefined) {\n                resolve(issuancePayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const checkForRequiredProof = (0, react_1.useCallback)(async ({ requiresProofOfWalletOwnership, payload, }) => {\n        logger_1.default.debug('Checking for required proof', { requiresProofOfWalletOwnership, payload });\n        if (requiresProofOfWalletOwnership) {\n            const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n            return result;\n        }\n        return { payload };\n    }, [waitForConfirmPOWO, waitForPOWO]);\n    /**\n     * New token request flow:\n     * wait for the user to request a new token\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to request a new token issuance\n     * wait for a gatekeeper record to be created\n     * once this flow is complete a new Gatekeeper token should be available and set in state\n     */\n    (0, react_1.useEffect)(() => {\n        if (!ownerSigns) {\n            waitForCivicPassIssuanceResponsePayload()\n                .then(checkForRequiredProof)\n                .then(waitForGatekeeperIssuanceRequest)\n                .then(waitForOnChainToken)\n                .then(() => checkForRefreshWithTimeout(wallet))\n                .catch((error) => {\n                dispatch({ type: 'civicPass_issuance_failure' });\n                logger_1.default.error('ERROR newTokenRequestFlow', error);\n            });\n        }\n    }, [\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n        ownerSigns,\n    ]);\n    (0, react_1.useEffect)(() => {\n        if (ownerSigns) {\n            waitForCivicPassIssuanceResponsePayload()\n                .then(waitForGatekeeperIssuanceRequest)\n                .then(waitForHandleTransaction)\n                .then(waitForOnChainToken)\n                .then(() => checkForRefreshWithTimeout(wallet))\n                .catch((error) => {\n                dispatch({ type: 'civicPass_issuance_failure' });\n                logger_1.default.error('ERROR newTokenRequestFlow', error);\n            });\n        }\n    }, [\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n        ownerSigns,\n    ]);\n    /**\n     * Refresh start flow:\n     * Triggered when we have a refreshResponse payload\n     * wait refresh to be triggered from the iFrame\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to refresh the token\n     * check if token is expired and timeout if token does not update within timeframe\n     */\n    (0, react_1.useEffect)(() => {\n        if (!ownerSigns) {\n            const useWallet = walletToRefresh || wallet;\n            waitForCivicPassRefreshResponsePayload()\n                .then(checkForRequiredProof)\n                .then(refreshToken(useWallet))\n                .then(waitForUnexpiredGatewayToken)\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, ownerSigns]);\n    (0, react_1.useEffect)(() => {\n        if (ownerSigns) {\n            const useWallet = walletToRefresh || wallet;\n            waitForCivicPassRefreshResponsePayload()\n                .then(refreshToken(useWallet))\n                .then(waitForHandleTransaction)\n                .then(waitForUnexpiredGatewayToken)\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof, walletToRefresh, wallet, ownerSigns]);\n    /**\n     * Refresh complete flow:\n     * Triggered by token change event\n     * Check the refresh token state\n     * Check if token is unexpired and clear timeout if token is not expired\n     * Complete the refresh event and clear the refresh response payload\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n            waitForUnexpiredGatewayToken()\n                .then(() => checkForRefreshWithTimeout(useWallet))\n                .then(() => {\n                dispatch({ type: 'refresh_complete' });\n            })\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_failed' });\n            });\n        }\n    }, [gatewayToken, refreshTokenState, walletToRefresh, wallet]);\n};\nexports.default = useOrchestration;\n"]},"metadata":{},"sourceType":"script"}