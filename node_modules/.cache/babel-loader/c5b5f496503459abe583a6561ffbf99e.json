{"ast":null,"code":"export function encode(data) {\n  return data.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"0x\");\n}\nexport function decode(data) {\n  if (data.indexOf(\"0x\") === 0) {\n    data = data.substr(2);\n  }\n\n  if (data.length % 2 === 1) {\n    data = \"0\" + data;\n  }\n\n  let key = data.match(/.{2}/g);\n\n  if (key === null) {\n    return Buffer.from([]);\n  }\n\n  return Buffer.from(key.map(byte => parseInt(byte, 16)));\n}","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,MAAV,CAAiBC,IAAjB,EAA6B;AACjC,SAAOA,IAAI,CAACC,MAAL,CACL,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CADhB,EAEL,IAFK,CAAP;AAID;AAED,OAAM,SAAUC,MAAV,CAAiBN,IAAjB,EAA6B;AACjC,MAAIA,IAAI,CAACO,OAAL,CAAa,IAAb,MAAuB,CAA3B,EAA8B;AAC5BP,QAAI,GAAGA,IAAI,CAACQ,MAAL,CAAY,CAAZ,CAAP;AACD;;AACD,MAAIR,IAAI,CAACS,MAAL,GAAc,CAAd,KAAoB,CAAxB,EAA2B;AACzBT,QAAI,GAAG,MAAMA,IAAb;AACD;;AAED,MAAIU,GAAG,GAAGV,IAAI,CAACW,KAAL,CAAW,OAAX,CAAV;;AAEA,MAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB,WAAOE,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAP;AACD;;AAED,SAAOD,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,GAAJ,CAASX,IAAD,IAAUY,QAAQ,CAACZ,IAAD,EAAO,EAAP,CAA1B,CAAZ,CAAP;AACD","names":["encode","data","reduce","str","byte","toString","padStart","decode","indexOf","substr","length","key","match","Buffer","from","map","parseInt"],"sourceRoot":"","sources":["../../../../src/utils/bytes/hex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}