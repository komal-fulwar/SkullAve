{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\n\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\n\nconst constants_1 = require(\"./constants\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\n\n\nclass AddGatekeeper extends solanaBorsh_1.Assignable {}\n\nclass IssueVanilla extends solanaBorsh_1.Assignable {}\n\nclass SetState extends solanaBorsh_1.Assignable {}\n\nclass UpdateExpiry extends solanaBorsh_1.Assignable {}\n\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {}\n\nclass GatewayInstruction extends solanaBorsh_1.Enum {\n  static addGatekeeper() {\n    return new GatewayInstruction({\n      addGatekeeper: new AddGatekeeper({})\n    });\n  }\n\n  static issueVanilla(seed, expireTime) {\n    return new GatewayInstruction({\n      issueVanilla: new IssueVanilla({\n        seed,\n        expireTime\n      })\n    });\n  }\n\n  static revoke() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          revoked: new GatewayTokenData_1.Revoked({})\n        })\n      })\n    });\n  }\n\n  static freeze() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          frozen: new GatewayTokenData_1.Frozen({})\n        })\n      })\n    });\n  }\n\n  static unfreeze() {\n    return new GatewayInstruction({\n      setState: new SetState({\n        state: new GatewayTokenData_1.GatewayTokenState({\n          active: new GatewayTokenData_1.Active({})\n        })\n      })\n    });\n  }\n\n  static updateExpiry(expireTime) {\n    return new GatewayInstruction({\n      updateExpiry: new UpdateExpiry({\n        expireTime\n      })\n    });\n  }\n\n  static revokeGatekeeper() {\n    return new GatewayInstruction({\n      revokeGatekeeper: new RevokeGatekeeper({})\n    });\n  }\n\n}\n\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\n\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.addGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\n\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n  const keys = [{\n    pubkey: funds_to,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.revokeGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\n\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperNetwork,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.issueVanilla = issueVanilla;\n\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [{\n  pubkey: gatewayTokenAccount,\n  isSigner: false,\n  isWritable: true\n}, {\n  pubkey: gatekeeperAuthority,\n  isSigner: true,\n  isWritable: false\n}, {\n  pubkey: gatekeeperAccount,\n  isSigner: false,\n  isWritable: false\n}];\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\n\n\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.revoke().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\n\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.freeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\n\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  const data = GatewayInstruction.unfreeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\n\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n  const keys = [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: constants_1.PROGRAM_ID,\n    data\n  });\n}\n\nexports.updateExpiry = updateExpiry;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [[\"addGatekeeper\", AddGatekeeper], [\"issueVanilla\", IssueVanilla], [\"setState\", SetState], [\"updateExpiry\", UpdateExpiry], [\"revokeGatekeeper\", RevokeGatekeeper]]\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [[\"seed\", {\n    kind: \"option\",\n    type: [8]\n  }], [\"expireTime\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]]\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]]\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});","map":{"version":3,"mappings":"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","names":["AddGatekeeper","solanaBorsh_1","IssueVanilla","SetState","UpdateExpiry","RevokeGatekeeper","GatewayInstruction","addGatekeeper","issueVanilla","seed","expireTime","revoke","setState","state","GatewayTokenData_1","revoked","freeze","frozen","unfreeze","active","updateExpiry","revokeGatekeeper","exports","payer","gatekeeperAccount","gatekeeperAuthority","network","keys","pubkey","isSigner","isWritable","web3_js_1","programId","data","encode","constants_1","funds_to","gatewayTokenAccount","owner","gatekeeperNetwork","getStateChangeAccountMeta","set","kind","field","values","fields","type"],"sourceRoot":"","sources":["../../src/lib/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}