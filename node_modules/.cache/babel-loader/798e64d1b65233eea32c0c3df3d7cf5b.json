{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\n\nconst workspace = new Proxy({}, {\n  get(workspaceCache, programName) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n\n    const fs = require(\"fs\");\n\n    const process = require(\"process\");\n\n    if (!_populatedWorkspace) {\n      const path = require(\"path\");\n\n      let projectRoot = process.cwd();\n\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        const parentDir = path.dirname(projectRoot);\n\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n\n      const idlFolder = `${projectRoot}/target/idl`;\n\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n      }\n\n      const idlMap = new Map();\n      fs.readdirSync(idlFolder).forEach(file => {\n        const filePath = `${idlFolder}/${file}`;\n        const idlStr = fs.readFileSync(filePath);\n        const idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        const name = camelCase(idl.name, {\n          pascalCase: true\n        });\n\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n      }); // Override the workspace programs if the user put them in the config.\n\n      const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      const clusterId = anchorToml.provider.cluster;\n\n      if (anchorToml.programs && anchorToml.programs[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);\n      }\n\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  }\n\n});\n\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(programName => {\n    const wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    const entry = overrideConfig[programName];\n    const overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n    let idl = idlMap.get(programName);\n\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n\n    if (!idl) {\n      throw new Error(`Error loading workspace IDL for ${programName}`);\n    }\n\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\n\nexport default workspace;","map":{"version":3,"mappings":"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","names":["camelCase","toml","PublicKey","Program","isBrowser","_populatedWorkspace","workspace","Proxy","get","workspaceCache","programName","console","log","undefined","fs","require","process","path","projectRoot","cwd","existsSync","join","parentDir","dirname","Error","idlFolder","idlMap","Map","readdirSync","forEach","file","filePath","idlStr","readFileSync","idl","JSON","parse","set","name","pascalCase","metadata","address","anchorToml","clusterId","provider","cluster","programs","attachWorkspaceOverride","overrideConfig","Object","keys","wsProgramName","entry","overrideAddress"],"sourceRoot":"","sources":["../../src/workspace.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}