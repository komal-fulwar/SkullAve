{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectionError, WalletError, WalletKeypairError, WalletNotConnectedError, WalletSignTransactionError, WalletWindowBlockedError, WalletWindowClosedError } from '@solana/wallet-adapter-base';\nimport { Keypair } from '@solana/web3.js';\nimport OpenLogin, { OPENLOGIN_NETWORK } from '@toruslabs/openlogin';\nimport { getED25519Key } from '@toruslabs/openlogin-ed25519';\nexport class TorusWalletAdapter extends BaseSignerWalletAdapter {\n  constructor(config) {\n    super();\n    this._options = Object.assign({\n      uxMode: 'popup',\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, config.options);\n    this._connecting = false;\n    this._openLogin = null;\n    this._keypair = null;\n  }\n\n  get publicKey() {\n    var _a;\n\n    return ((_a = this._keypair) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined';\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._keypair;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let openLogin;\n        let privateKey;\n\n        try {\n          openLogin = new OpenLogin(this._options);\n          yield openLogin.init();\n          privateKey = openLogin.privKey;\n\n          if (!privateKey) {\n            let listener;\n\n            try {\n              privateKey = yield new Promise((resolve, reject) => {\n                listener = _ref => {\n                  let {\n                    reason\n                  } = _ref;\n\n                  switch (reason === null || reason === void 0 ? void 0 : reason.message.toLowerCase()) {\n                    case 'user closed popup':\n                      reason = new WalletWindowClosedError(reason.message, reason);\n                      break;\n\n                    case 'unable to open window':\n                      reason = new WalletWindowBlockedError(reason.message, reason);\n                      break;\n                  }\n\n                  reject(reason);\n                };\n\n                window.addEventListener('unhandledrejection', listener);\n                openLogin.login().then( // HACK: result.privKey is not padded to 64 bytes, use provider.privKey\n                result => resolve(openLogin.privKey), reason => listener({\n                  reason\n                }));\n              });\n            } finally {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              window.removeEventListener('unhandledrejection', listener);\n            }\n          }\n        } catch (error) {\n          if (error instanceof WalletError) throw error;\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let keypair;\n\n        try {\n          keypair = Keypair.fromSecretKey(getED25519Key(privateKey).sk);\n        } catch (error) {\n          throw new WalletKeypairError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._openLogin = openLogin;\n        this._keypair = keypair;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const openLogin = this._openLogin;\n\n      if (openLogin) {\n        this._openLogin = null;\n        this._keypair = null;\n\n        try {\n          yield openLogin.logout();\n          yield openLogin._cleanup();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const keypair = this._keypair;\n        if (!keypair) throw new WalletNotConnectedError();\n\n        try {\n          transaction.partialSign(keypair);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const keypair = this._keypair;\n        if (!keypair) throw new WalletNotConnectedError();\n\n        try {\n          for (const transaction of transactions) {\n            transaction.partialSign(keypair);\n          }\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","WalletConnectionError","WalletDisconnectionError","WalletError","WalletKeypairError","WalletNotConnectedError","WalletSignTransactionError","WalletWindowBlockedError","WalletWindowClosedError","Keypair","OpenLogin","OPENLOGIN_NETWORK","getED25519Key","TorusWalletAdapter","constructor","config","_options","Object","uxMode","network","MAINNET","options","_connecting","_openLogin","_keypair","publicKey","_a","ready","window","connecting","connected","connect","openLogin","privateKey","init","privKey","listener","Promise","resolve","reject","reason","message","toLowerCase","addEventListener","login","then","result","removeEventListener","error","keypair","fromSecretKey","sk","emit","disconnect","logout","_cleanup","signTransaction","transaction","partialSign","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}