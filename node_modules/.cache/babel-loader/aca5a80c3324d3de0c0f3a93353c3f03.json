{"ast":null,"code":"var isFunction = require('101/is-function');\n\nvar isInteger = require('101/is-integer');\n\nvar isObject = require('101/is-object');\n\nvar isString = require('101/is-string');\n\nvar assertType = require('./assert-type.js');\n\nvar isClass = require('./is-class.js');\n\nvar NoClass = function () {};\n\nvar startsWithVowel = require('./starts-with-vowel.js');\n\nvar classes = {\n  // primitive classes\n  string: String,\n  number: Number,\n  // extended typeof support\n  array: Array,\n  regexp: RegExp\n};\nmodule.exports = validate;\n/**\n * validate an argument\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {string|function} validator argument validator\n */\n\nfunction validate(key, arg, validator, _plural) {\n  if (validator === '*') {\n    return;\n  }\n\n  var keyStr = '\"' + key + '\"';\n  var typeStr;\n  var article;\n  var Class;\n  var errMessage;\n  var assertion;\n\n  if (Array.isArray(validator)) {\n    // circular require\n    return require('./multi-validate.js')(key, arg, validator);\n  } else if (isString(validator)) {\n    // validator is a string\n    typeStr = validator;\n    Class = classes[typeStr] || NoClass;\n    article = startsWithVowel(typeStr) ? 'an' : 'a';\n    errMessage = _plural ? keyStr + ' must be ' + typeStr + 's' : keyStr + ' must be ' + article + ' ' + typeStr;\n\n    if (typeStr === 'integer') {\n      assertion = isInteger(arg);\n    } else if (typeStr === 'object') {\n      assertion = isObject(arg);\n    } else {\n      assertion = arg instanceof Class || typeof arg === validator;\n    }\n\n    assertType(assertion, errMessage);\n  } else if (isClass(validator)) {\n    // validator is a class\n    typeStr = validator.name;\n    Class = validator;\n    errMessage = _plural ? keyStr + ' must be instances of \"' + typeStr + '\"' : keyStr + ' must be an instance of \"' + typeStr + '\"';\n    assertType(arg instanceof Class, errMessage);\n  } else if (isFunction(validator)) {\n    // validator is a test\n    try {\n      // test will throw an error if it fails\n      validator(arg);\n    } catch (e) {\n      e.message = keyStr += ': ' + e.message;\n      throw e;\n    }\n  } else {\n    throw new TypeError('\"validator\" must be a string, class or function');\n  }\n}","map":{"version":3,"sources":["/Users/komalfulwar/Downloads/candy-machine-ui/node_modules/assert-args/lib/validate.js"],"names":["isFunction","require","isInteger","isObject","isString","assertType","isClass","NoClass","startsWithVowel","classes","string","String","number","Number","array","Array","regexp","RegExp","module","exports","validate","key","arg","validator","_plural","keyStr","typeStr","article","Class","errMessage","assertion","isArray","name","e","message","TypeError"],"mappings":"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","sourcesContent":["var isFunction = require('101/is-function')\nvar isInteger = require('101/is-integer')\nvar isObject = require('101/is-object')\nvar isString = require('101/is-string')\n\nvar assertType = require('./assert-type.js')\nvar isClass = require('./is-class.js')\nvar NoClass = function () {}\nvar startsWithVowel = require('./starts-with-vowel.js')\nvar classes = {\n  // primitive classes\n  string: String,\n  number: Number,\n  // extended typeof support\n  array: Array,\n  regexp: RegExp\n}\n\nmodule.exports = validate\n/**\n * validate an argument\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {string|function} validator argument validator\n */\nfunction validate (key, arg, validator, _plural) {\n  if (validator === '*') { return }\n\n  var keyStr = '\"' + key + '\"'\n  var typeStr\n  var article\n  var Class\n  var errMessage\n  var assertion\n\n  if (Array.isArray(validator)) {\n    // circular require\n    return require('./multi-validate.js')(key, arg, validator)\n  } else if (isString(validator)) {\n    // validator is a string\n    typeStr = validator\n    Class = classes[typeStr] || NoClass\n    article = startsWithVowel(typeStr) ? 'an' : 'a'\n    errMessage = _plural\n      ? (keyStr + ' must be ' + typeStr + 's')\n      : (keyStr + ' must be ' + article + ' ' + typeStr)\n\n    if (typeStr === 'integer') {\n      assertion = isInteger(arg)\n    } else if (typeStr === 'object') {\n      assertion = isObject(arg)\n    } else {\n      assertion = arg instanceof Class || typeof arg === validator\n    }\n\n    assertType(assertion, errMessage)\n  } else if (isClass(validator)) {\n    // validator is a class\n    typeStr = validator.name\n    Class = validator\n    errMessage = _plural\n      ? (keyStr + ' must be instances of \"' + typeStr + '\"')\n      : (keyStr + ' must be an instance of \"' + typeStr + '\"')\n    assertType(arg instanceof Class, errMessage)\n  } else if (isFunction(validator)) {\n    // validator is a test\n    try {\n      // test will throw an error if it fails\n      validator(arg)\n    } catch (e) {\n      e.message = (keyStr += ': ' + e.message)\n      throw e\n    }\n  } else {\n    throw new TypeError('\"validator\" must be a string, class or function')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}