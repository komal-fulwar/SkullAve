{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\nexport class LedgerWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._disconnected = () => {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\n    this._connecting = false;\n    this._transport = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!navigator.hid;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._transport;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let transport;\n\n        try {\n          transport = yield TransportWebHid.create();\n        } catch (error) {\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = yield getPublicKey(transport, this._derivationPath);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        transport.on('disconnect', this._disconnected);\n        this._transport = transport;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n\n        try {\n          yield transport.close();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const signature = yield signTransaction(transport, transaction, this._derivationPath);\n          transaction.addSignature(publicKey, signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const derivationPath = this._derivationPath;\n\n          for (const transaction of transactions) {\n            const signature = yield signTransaction(transport, transaction, derivationPath);\n            transaction.addSignature(publicKey, signature);\n          }\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TransportWebHid","BaseSignerWalletAdapter","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletNotConnectedError","WalletPublicKeyError","WalletSignTransactionError","getDerivationPath","getPublicKey","signTransaction","LedgerWalletAdapter","constructor","config","transport","_transport","off","_disconnected","_publicKey","emit","_derivationPath","derivationPath","_connecting","publicKey","ready","window","navigator","hid","connecting","connected","connect","create","error","message","on","disconnect","close","transaction","signature","addSignature","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}