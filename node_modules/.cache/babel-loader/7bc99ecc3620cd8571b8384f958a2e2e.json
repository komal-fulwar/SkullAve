{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport function poll(callback, interval, count) {\n  if (count > 0) {\n    setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n      const done = yield callback();\n      if (!done) poll(callback, interval, count - 1);\n    }), interval);\n  }\n}\nexport function pollUntilReady(adapter, pollInterval, pollCount) {\n  poll(() => {\n    const {\n      ready\n    } = adapter;\n\n    if (ready) {\n      if (!adapter.emit('ready')) {\n        console.warn(`${adapter.constructor.name} is ready but no listener was registered`);\n      }\n    }\n\n    return ready;\n  }, pollInterval, pollCount);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAM,SAAUA,IAAV,CAAeC,QAAf,EAA2DC,QAA3D,EAA6EC,KAA7E,EAA0F;AAC5F,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACXC,cAAU,CAAC,MAAWC;AAClB,YAAMC,IAAI,GAAG,MAAML,QAAQ,EAA3B;AACA,UAAI,CAACK,IAAL,EAAWN,IAAI,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAAK,GAAG,CAA7B,CAAJ;AACd,KAHqB,CAAZ,EAGPD,QAHO,CAAV;AAIH;AACJ;AAED,OAAM,SAAUK,cAAV,CAAyBC,OAAzB,EAAiDC,YAAjD,EAAuEC,SAAvE,EAAwF;AAC1FV,MAAI,CACA,MAAK;AACD,UAAM;AAAEW;AAAF,QAAYH,OAAlB;;AACA,QAAIG,KAAJ,EAAW;AACP,UAAI,CAACH,OAAO,CAACI,IAAR,CAAa,OAAb,CAAL,EAA4B;AACxBC,eAAO,CAACC,IAAR,CAAa,GAAGN,OAAO,CAACO,WAAR,CAAoBC,IAAI,0CAAxC;AACH;AACJ;;AACD,WAAOL,KAAP;AACH,GATD,EAUAF,YAVA,EAWAC,SAXA,CAAJ;AAaH","names":["poll","callback","interval","count","setTimeout","__awaiter","done","pollUntilReady","adapter","pollInterval","pollCount","ready","emit","console","warn","constructor","name"],"sourceRoot":"","sources":["../src/poll.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}