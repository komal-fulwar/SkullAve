{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class CoinhubWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.coinhub) === null || _a === void 0 ? void 0 : _a.isCoinhubWallet);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._wallet;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = window.coinhub;\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isCoinhubWallet) throw new WalletNotInstalledError();\n        let account;\n\n        try {\n          account = yield wallet.getAccount();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return wallet.signTransaction(transaction);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return wallet.signAllTransactions(transactions);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","pollUntilReady","WalletAccountError","WalletNotConnectedError","WalletNotFoundError","WalletNotInstalledError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","CoinhubWalletAdapter","constructor","config","_connecting","_wallet","_publicKey","ready","pollInterval","pollCount","publicKey","window","coinhub","_a","isCoinhubWallet","connecting","connected","connect","wallet","account","getAccount","error","message","emit","disconnect","signTransaction","transaction","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}