{"ast":null,"code":"import * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport class EventCoder {\n  constructor(idl) {\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    const layouts = idl.events.map(event => {\n      let eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(f => {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(e => [base64.fromByteArray(eventDiscriminator(e.name)), e.name]));\n  }\n\n  decode(log) {\n    let logArr; // This will throw if log length is not a multiple of 4.\n\n    try {\n      logArr = Buffer.from(base64.toByteArray(log));\n    } catch (e) {\n      return null;\n    }\n\n    const disc = base64.fromByteArray(logArr.slice(0, 8)); // Only deserialize if the discriminator implies a proper event.\n\n    const eventName = this.discriminators.get(disc);\n\n    if (eventName === undefined) {\n      return null;\n    }\n\n    const layout = this.layouts.get(eventName);\n\n    if (!layout) {\n      throw new Error(`Unknown event: ${eventName}`);\n    }\n\n    const data = layout.decode(logArr.slice(8));\n    return {\n      data,\n      name: eventName\n    };\n  }\n\n}\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,WAAxB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AAGA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAM,MAAOC,UAAP,CAAiB;AAWrBC,cAAmBC,GAAnB,EAA2B;AACzB,QAAIA,GAAG,CAACC,MAAJ,KAAeC,SAAnB,EAA8B;AAC5B,WAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA;AACD;;AACD,UAAMD,OAAO,GAAGH,GAAG,CAACC,MAAJ,CAAWI,GAAX,CAAgBC,KAAD,IAAU;AACvC,UAAIC,YAAY,GAAe;AAC7BC,YAAI,EAAEF,KAAK,CAACE,IADiB;AAE7BC,YAAI,EAAE;AACJC,cAAI,EAAE,QADF;AAEJC,gBAAM,EAAEL,KAAK,CAACK,MAAN,CAAaN,GAAb,CAAkBO,CAAD,IAAM;AAC7B,mBAAO;AAAEJ,kBAAI,EAAEI,CAAC,CAACJ,IAAV;AAAgBC,kBAAI,EAAEG,CAAC,CAACH;AAAxB,aAAP;AACD,WAFO;AAFJ;AAFuB,OAA/B;AASA,aAAO,CAACH,KAAK,CAACE,IAAP,EAAaX,QAAQ,CAACgB,aAAT,CAAuBN,YAAvB,EAAqCP,GAAG,CAACc,KAAzC,CAAb,CAAP;AACD,KAXe,CAAhB,CALyB,CAiBzB;;AACA,SAAKX,OAAL,GAAe,IAAIC,GAAJ,CAAQD,OAAR,CAAf;AAEA,SAAKY,cAAL,GAAsB,IAAIX,GAAJ,CACpBJ,GAAG,CAACC,MAAJ,KAAeC,SAAf,GACI,EADJ,GAEIF,GAAG,CAACC,MAAJ,CAAWI,GAAX,CAAgBW,CAAD,IAAO,CACpBrB,MAAM,CAACsB,aAAP,CAAqBC,kBAAkB,CAACF,CAAC,CAACR,IAAH,CAAvC,CADoB,EAEpBQ,CAAC,CAACR,IAFkB,CAAtB,CAHgB,CAAtB;AAQD;;AAEMW,QAAM,CAA8BC,GAA9B,EAAyC;AACpD,QAAIC,MAAJ,CADoD,CAEpD;;AACA,QAAI;AACFA,YAAM,GAAGC,MAAM,CAACC,IAAP,CAAY5B,MAAM,CAAC6B,WAAP,CAAmBJ,GAAnB,CAAZ,CAAT;AACD,KAFD,CAEE,OAAOJ,CAAP,EAAU;AACV,aAAO,IAAP;AACD;;AACD,UAAMS,IAAI,GAAG9B,MAAM,CAACsB,aAAP,CAAqBI,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAArB,CAAb,CARoD,CAUpD;;AACA,UAAMC,SAAS,GAAG,KAAKZ,cAAL,CAAoBa,GAApB,CAAwBH,IAAxB,CAAlB;;AACA,QAAIE,SAAS,KAAKzB,SAAlB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,UAAM2B,MAAM,GAAG,KAAK1B,OAAL,CAAayB,GAAb,CAAiBD,SAAjB,CAAf;;AACA,QAAI,CAACE,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,kBAAkBH,SAAS,EAArC,CAAN;AACD;;AACD,UAAMI,IAAI,GAAGF,MAAM,CAACV,MAAP,CAAcE,MAAM,CAACK,KAAP,CAAa,CAAb,CAAd,CAAb;AACA,WAAO;AAAEK,UAAF;AAAQvB,UAAI,EAAEmB;AAAd,KAAP;AACD;;AA/DoB;AAkEvB,OAAM,SAAUT,kBAAV,CAA6BV,IAA7B,EAAyC;AAC7C,SAAOc,MAAM,CAACC,IAAP,CAAY3B,MAAM,CAACoC,MAAP,CAAc,SAASxB,IAAI,EAA3B,CAAZ,EAA4CkB,KAA5C,CAAkD,CAAlD,EAAqD,CAArD,CAAP;AACD","names":["base64","sha256","IdlCoder","EventCoder","constructor","idl","events","undefined","layouts","Map","map","event","eventTypeDef","name","type","kind","fields","f","typeDefLayout","types","discriminators","e","fromByteArray","eventDiscriminator","decode","log","logArr","Buffer","from","toByteArray","disc","slice","eventName","get","layout","Error","data","digest"],"sourceRoot":"","sources":["../../../src/coder/event.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}