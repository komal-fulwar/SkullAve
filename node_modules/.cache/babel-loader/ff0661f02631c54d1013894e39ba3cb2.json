{"ast":null,"code":"import BN from \"bn.js\";\nimport { sha256 as sha256Sync } from \"js-sha256\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\"; // Sync version of web3.PublicKey.createWithSeed.\n\nexport function createWithSeedSync(fromPublicKey, seed, programId) {\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n  const hash = sha256Sync.digest(buffer);\n  return new PublicKey(Buffer.from(hash));\n} // Sync version of web3.PublicKey.createProgramAddress.\n\nexport function createProgramAddressSync(seeds, programId) {\n  const MAX_SEED_LENGTH = 32;\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from(\"ProgramDerivedAddress\")]);\n  let hash = sha256Sync(new Uint8Array(buffer));\n  let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n  if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n    throw new Error(`Invalid seeds, address must fall off the curve`);\n  }\n\n  return new PublicKey(publicKeyBytes);\n} // Sync version of web3.PublicKey.findProgramAddress.\n\nexport function findProgramAddressSync(seeds, programId) {\n  let nonce = 255;\n  let address;\n\n  while (nonce != 0) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n      address = createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n\n      nonce--;\n      continue;\n    }\n\n    return [address, nonce];\n  }\n\n  throw new Error(`Unable to find a viable program address nonce`);\n}\n\nconst toBuffer = arr => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport async function associated(programId) {\n  let seeds = [Buffer.from([97, 110, 99, 104, 111, 114])]; // b\"anchor\".\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  args.forEach(arg => {\n    seeds.push( // @ts-ignore\n    arg.buffer !== undefined ? arg : translateAddress(arg).toBuffer());\n  });\n  const [assoc] = await PublicKey.findProgramAddress(seeds, translateAddress(programId));\n  return assoc;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,EAAP,MAAe,OAAf;AACA,SAASC,MAAM,IAAIC,UAAnB,QAAqC,WAArC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAAkBC,gBAAlB,QAA0C,mBAA1C,C,CAEA;;AACA,OAAM,SAAUC,kBAAV,CACJC,aADI,EAEJC,IAFI,EAGJC,SAHI,EAGgB;AAEpB,QAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,CAC3BL,aAAa,CAACM,QAAd,EAD2B,EAE3BF,MAAM,CAACG,IAAP,CAAYN,IAAZ,CAF2B,EAG3BC,SAAS,CAACI,QAAV,EAH2B,CAAd,CAAf;AAKA,QAAME,IAAI,GAAGZ,UAAU,CAACa,MAAX,CAAkBN,MAAlB,CAAb;AACA,SAAO,IAAIN,SAAJ,CAAcO,MAAM,CAACG,IAAP,CAAYC,IAAZ,CAAd,CAAP;AACD,C,CAED;;AACA,OAAM,SAAUE,wBAAV,CACJC,KADI,EAEJT,SAFI,EAEgB;AAEpB,QAAMU,eAAe,GAAG,EAAxB;AAEA,MAAIT,MAAM,GAAGC,MAAM,CAACS,KAAP,CAAa,CAAb,CAAb;AACAF,OAAK,CAACG,OAAN,CAAc,UAAUb,IAAV,EAAc;AAC1B,QAAIA,IAAI,CAACc,MAAL,GAAcH,eAAlB,EAAmC;AACjC,YAAM,IAAII,SAAJ,CAAc,0BAAd,CAAN;AACD;;AACDb,UAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACF,MAAD,EAASG,QAAQ,CAACL,IAAD,CAAjB,CAAd,CAAT;AACD,GALD;AAMAE,QAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,CACrBF,MADqB,EAErBD,SAAS,CAACI,QAAV,EAFqB,EAGrBF,MAAM,CAACG,IAAP,CAAY,uBAAZ,CAHqB,CAAd,CAAT;AAKA,MAAIC,IAAI,GAAGZ,UAAU,CAAC,IAAIqB,UAAJ,CAAed,MAAf,CAAD,CAArB;AACA,MAAIe,cAAc,GAAG,IAAIxB,EAAJ,CAAOc,IAAP,EAAa,EAAb,EAAiBW,OAAjB,CAAyBC,SAAzB,EAAoC,EAApC,CAArB;;AACA,MAAIvB,SAAS,CAACwB,SAAV,CAAoB,IAAIJ,UAAJ,CAAeC,cAAf,CAApB,CAAJ,EAAyD;AACvD,UAAM,IAAII,KAAJ,CAAU,gDAAV,CAAN;AACD;;AACD,SAAO,IAAIzB,SAAJ,CAAcqB,cAAd,CAAP;AACD,C,CAED;;AACA,OAAM,SAAUK,sBAAV,CACJZ,KADI,EAEJT,SAFI,EAEgB;AAEpB,MAAIsB,KAAK,GAAG,GAAZ;AACA,MAAIC,OAAJ;;AACA,SAAOD,KAAK,IAAI,CAAhB,EAAmB;AACjB,QAAI;AACF,YAAME,cAAc,GAAGf,KAAK,CAACN,MAAN,CAAaD,MAAM,CAACG,IAAP,CAAY,CAACiB,KAAD,CAAZ,CAAb,CAAvB;AACAC,aAAO,GAAGf,wBAAwB,CAACgB,cAAD,EAAiBxB,SAAjB,CAAlC;AACD,KAHD,CAGE,OAAOyB,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYX,SAAnB,EAA8B;AAC5B,cAAMW,GAAN;AACD;;AACDH,WAAK;AACL;AACD;;AACD,WAAO,CAACC,OAAD,EAAUD,KAAV,CAAP;AACD;;AACD,QAAM,IAAIF,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,MAAMhB,QAAQ,GAAIsB,GAAD,IAAqD;AACpE,MAAIA,GAAG,YAAYxB,MAAnB,EAA2B;AACzB,WAAOwB,GAAP;AACD,GAFD,MAEO,IAAIA,GAAG,YAAYX,UAAnB,EAA+B;AACpC,WAAOb,MAAM,CAACG,IAAP,CAAYqB,GAAG,CAACzB,MAAhB,EAAwByB,GAAG,CAACC,UAA5B,EAAwCD,GAAG,CAACE,UAA5C,CAAP;AACD,GAFM,MAEA;AACL,WAAO1B,MAAM,CAACG,IAAP,CAAYqB,GAAZ,CAAP;AACD;AACF,CARD;;AAUA,OAAO,eAAeG,UAAf,CACL7B,SADK,EAE6B;AAElC,MAAIS,KAAK,GAAG,CAACP,MAAM,CAACG,IAAP,CAAY,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,CAAZ,CAAD,CAAZ,CAFkC,CAEuB;;AAFvB,oCAA/ByB,IAA+B;AAA/BA,QAA+B;AAAA;;AAGlCA,MAAI,CAAClB,OAAL,CAAcmB,GAAD,IAAQ;AACnBtB,SAAK,CAACuB,IAAN,EACE;AACAD,OAAG,CAAC9B,MAAJ,KAAeiB,SAAf,GAA2Ba,GAA3B,GAAiCnC,gBAAgB,CAACmC,GAAD,CAAhB,CAAsB3B,QAAtB,EAFnC;AAID,GALD;AAMA,QAAM,CAAC6B,KAAD,IAAU,MAAMtC,SAAS,CAACuC,kBAAV,CACpBzB,KADoB,EAEpBb,gBAAgB,CAACI,SAAD,CAFI,CAAtB;AAIA,SAAOiC,KAAP;AACD","names":["BN","sha256","sha256Sync","PublicKey","translateAddress","createWithSeedSync","fromPublicKey","seed","programId","buffer","Buffer","concat","toBuffer","from","hash","digest","createProgramAddressSync","seeds","MAX_SEED_LENGTH","alloc","forEach","length","TypeError","Uint8Array","publicKeyBytes","toArray","undefined","isOnCurve","Error","findProgramAddressSync","nonce","address","seedsWithNonce","err","arr","byteOffset","byteLength","associated","args","arg","push","assoc","findProgramAddress"],"sourceRoot":"","sources":["../../../src/utils/pubkey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}