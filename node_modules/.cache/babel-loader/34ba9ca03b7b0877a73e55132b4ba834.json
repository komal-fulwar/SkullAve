{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class SolflareWalletAdapter extends BaseMessageSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._disconnected = () => {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.solflare) === null || _a === void 0 ? void 0 : _a.isSolflare);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected);\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && window.solflare;\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isSolflare) throw new WalletNotInstalledError();\n\n        if (!wallet.isConnected) {\n          try {\n            yield wallet.connect();\n          } catch (error) {\n            throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          }\n        } // HACK: Solflare doesn't reject its promise if the popup is closed\n\n\n        if (!wallet.publicKey) throw new WalletConnectionError();\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(wallet.publicKey.toBytes());\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        wallet.on('disconnect', this._disconnected);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          yield wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signTransaction(transaction)) || transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signAllTransactions(transactions)) || transactions;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const {\n            signature\n          } = yield wallet.signMessage(message, 'utf8');\n          return Uint8Array.from(signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseMessageSignerWalletAdapter","pollUntilReady","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletNotConnectedError","WalletNotFoundError","WalletNotInstalledError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","SolflareWalletAdapter","constructor","config","wallet","_wallet","off","_disconnected","_publicKey","emit","_connecting","ready","pollInterval","pollCount","publicKey","window","solflare","_a","isSolflare","connecting","connected","isConnected","connect","error","message","toBytes","on","disconnect","signTransaction","transaction","signAllTransactions","transactions","signMessage","signature","Uint8Array","from"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}