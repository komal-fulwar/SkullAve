{"ast":null,"code":"/**\n * @module 101/is-empty\n */\nvar isString = require('./is-string');\n\nvar isObject = require('./is-object');\n\nvar isArray = Array.isArray;\n/**\n * Functional version of val empty object, array or object\n * @function module:101/is-empty\n * @param {string|array|object} val - value checked to be a empty\n * @return {boolean} Whether the value is an empty or not\n */\n\nmodule.exports = isEmpty;\n\nfunction isEmpty(val) {\n  if (isString(val) || isArray(val)) {\n    return val.length === 0;\n  } else if (isObject(val)) {\n    for (var name in val) {\n      return false;\n    }\n\n    return true;\n  } else {\n    throw new TypeError('Val must be a string, array or object');\n  }\n}","map":{"version":3,"sources":["/Users/komalfulwar/Documents/GitHub/SkullAve/node_modules/101/is-empty.js"],"names":["isString","require","isObject","isArray","Array","module","exports","isEmpty","val","length","name","TypeError"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIE,OAAO,GAAGC,KAAK,CAACD,OAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAE,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAIR,QAAQ,CAACQ,GAAD,CAAR,IAAiBL,OAAO,CAACK,GAAD,CAA5B,EAAmC;AACjC,WAAOA,GAAG,CAACC,MAAJ,KAAe,CAAtB;AACD,GAFD,MAGK,IAAIP,QAAQ,CAACM,GAAD,CAAZ,EAAmB;AACtB,SAAK,IAAIE,IAAT,IAAiBF,GAAjB,EAAsB;AACpB,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GALI,MAMA;AACH,UAAM,IAAIG,SAAJ,CAAc,uCAAd,CAAN;AACD;AACF","sourcesContent":["/**\n * @module 101/is-empty\n */\n\nvar isString = require('./is-string');\nvar isObject = require('./is-object');\nvar isArray = Array.isArray;\n\n/**\n * Functional version of val empty object, array or object\n * @function module:101/is-empty\n * @param {string|array|object} val - value checked to be a empty\n * @return {boolean} Whether the value is an empty or not\n */\nmodule.exports = isEmpty;\n\nfunction isEmpty (val) {\n  if (isString(val) || isArray(val)) {\n    return val.length === 0;\n  }\n  else if (isObject(val)) {\n    for (var name in val) {\n      return false;\n    }\n    return true;\n  }\n  else {\n    throw new TypeError('Val must be a string, array or object');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}