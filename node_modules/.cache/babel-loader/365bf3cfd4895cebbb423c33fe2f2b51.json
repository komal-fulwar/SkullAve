{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletDisconnectedError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class MathWalletWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._messaged = event => {\n      const data = event.data;\n\n      if (data && data.origin === 'mathwallet_internal' && data.type === 'lockStatusChanged' && !data.payload) {\n        this._disconnected();\n      }\n    };\n\n    this._disconnected = () => {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._wallet;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && window.solana;\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isMathWallet) throw new WalletNotInstalledError(); // @TODO: handle if popup is blocked\n\n        let account;\n\n        try {\n          account = yield wallet.getAccount();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        window.addEventListener('message', this._messaged);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._wallet) {\n        window.removeEventListener('message', this._messaged);\n        this._wallet = null;\n        this._publicKey = null;\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signTransaction(transaction)) || transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signAllTransactions(transactions)) || transactions;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseSignerWalletAdapter","pollUntilReady","WalletAccountError","WalletDisconnectedError","WalletNotConnectedError","WalletNotFoundError","WalletNotInstalledError","WalletPublicKeyError","WalletSignTransactionError","PublicKey","MathWalletWalletAdapter","constructor","config","event","data","origin","type","payload","_disconnected","_wallet","window","removeEventListener","_messaged","_publicKey","emit","_connecting","ready","pollInterval","pollCount","publicKey","solana","_a","isMathWallet","connecting","connected","connect","wallet","account","getAccount","error","message","addEventListener","disconnect","signTransaction","transaction","signAllTransactions","transactions"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}