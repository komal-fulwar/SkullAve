{"ast":null,"code":"var _jsxFileName = \"/Users/komalfulwar/Downloads/candy-machine-ui/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport styled from \"styled-components\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken } from \"./candy-machine\";\nimport { toDate, getAtaForMint } from \"./utils\";\nimport Header from \"./header/Header\";\nimport Body from \"./body/body\";\nimport { getAllNft } from \"./service/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\nconst MintContainer = styled.div``; // add your owns styles here\n\nconst Home = props => {\n  _s();\n\n  const [page, setPage] = useState(0);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [nft, setNft] = useState([]);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(token);\n            let valid = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(valid);\n            active = presale && valid || active;\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById(\"#identity\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey))[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, true);\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      }); // updates the candy machine state to reflect the lastest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  const getNft = async page => {\n    console.log(\"1\");\n    const res = await getAllNft(page);\n    setNft(res);\n    console.log(res, \"res \");\n  };\n\n  useEffect(() => {\n    getNft(page);\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      data: nft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"ZV5pUnxxoqVS3z5jM1gU5fpYgH0=\", false, function () {\n  return [useWallet];\n});\n\n_c = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/komalfulwar/Downloads/candy-machine-ui/src/Home.tsx"],"names":["useEffect","useMemo","useState","useCallback","anchor","styled","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","toDate","getAtaForMint","Header","Body","getAllNft","ConnectButton","MintContainer","div","Home","props","page","setPage","isUserMinting","setIsUserMinting","nft","setNft","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","candyMachineId","cndy","connection","active","state","goLiveDate","toNumber","Date","getTime","presale","whitelistMintSettings","isWhitelistOnly","mint","web3","PublicKey","token","balance","getTokenAccountBalance","valid","parseInt","value","amount","e","console","log","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","onMint","document","getElementById","click","connected","program","mintTxId","status","err","txTimeout","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","getNft","res","getCountdownDate","BN"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,EAAuCC,WAAvC,QAA0D,OAA1D;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAOA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SACEC,qCADF,EAIEC,oBAJF,EAKEC,YALF,QAMO,iBANP;AAOA,SAAqBC,MAArB,EAA2CC,aAA3C,QAAgE,SAAhE;AAIA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,SAAT,QAA0B,eAA1B;;;AAEA,MAAMC,aAAa,GAAGX,MAAM,CAACE,kBAAD,CAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAMU,aAAa,GAAGZ,MAAM,CAACa,GAAI,EAAjC,C,CAAoC;;AASpC,MAAMC,IAAI,GAAIC,KAAD,IAAsB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACuB,GAAD,EAAMC,MAAN,IAAgBxB,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACyB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,EAAhD;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAa;AACvD6B,IAAAA,IAAI,EAAE,KADiD;AAEvDC,IAAAA,OAAO,EAAE,EAF8C;AAGvDC,IAAAA,QAAQ,EAAEC;AAH6C,GAAb,CAA5C;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,EAAtC;AACA,QAAM,CAACqC,cAAD,EAAiBC,iBAAjB,IAAsCtC,QAAQ,EAApD;AACA,QAAM,CAACuC,eAAD,EAAkBC,kBAAlB,IAAwCxC,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACyC,SAAD,EAAYC,YAAZ,IAA4B1C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC2C,aAAD,EAAgBC,gBAAhB,IAAoC5C,QAAQ,EAAlD;AAEA,QAAM6C,MAAM,GAAG3B,KAAK,CAAC4B,OAArB;AACA,QAAMC,MAAM,GAAG3C,SAAS,EAAxB;AAEA,QAAM4C,YAAY,GAAGjD,OAAO,CAAC,MAAM;AACjC,QACE,CAACgD,MAAD,IACA,CAACA,MAAM,CAACE,SADR,IAEA,CAACF,MAAM,CAACG,mBAFR,IAGA,CAACH,MAAM,CAACI,eAJV,EAKE;AACA;AACD;;AAED,WAAO;AACLF,MAAAA,SAAS,EAAEF,MAAM,CAACE,SADb;AAELC,MAAAA,mBAAmB,EAAEH,MAAM,CAACG,mBAFvB;AAGLC,MAAAA,eAAe,EAAEJ,MAAM,CAACI;AAHnB,KAAP;AAKD,GAf2B,EAezB,CAACJ,MAAD,CAfyB,CAA5B;AAiBA,QAAMK,wBAAwB,GAAGnD,WAAW,CAAC,YAAY;AACvD,QAAI,CAAC+C,YAAL,EAAmB;AACjB;AACD;;AAED,QAAI9B,KAAK,CAACmC,cAAV,EAA0B;AACxB,UAAI;AAAA;;AACF,cAAMC,IAAI,GAAG,MAAM/C,oBAAoB,CACrCyC,YADqC,EAErC9B,KAAK,CAACmC,cAF+B,EAGrCnC,KAAK,CAACqC,UAH+B,CAAvC;AAKA,YAAIC,MAAM,GACR,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,qCAAAA,IAAI,CAAEG,KAAN,CAAYC,UAAZ,gFAAwBC,QAAxB,MAAqC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAD9D;AAEA,YAAIC,OAAO,GAAG,KAAd,CARE,CASF;;AACA,YAAIR,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEG,KAAN,CAAYM,qBAAhB,EAAuC;AACrC;AACA,cACET,IAAI,CAACG,KAAL,CAAWM,qBAAX,CAAiCD,OAAjC,KACC,CAACR,IAAI,CAACG,KAAL,CAAWC,UAAZ,IACCJ,IAAI,CAACG,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,KAAmC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAF5D,CADF,EAIE;AACAC,YAAAA,OAAO,GAAG,IAAV;AACD,WARoC,CASrC;;;AACA,cAAIR,IAAI,CAACG,KAAL,CAAWM,qBAAX,CAAiCpB,aAArC,EAAoD;AAClDC,YAAAA,gBAAgB,CAACU,IAAI,CAACG,KAAL,CAAWM,qBAAX,CAAiCpB,aAAlC,CAAhB;AACD,WAFD,MAEO;AACLC,YAAAA,gBAAgB,CAACZ,SAAD,CAAhB,CADK,CAEL;AACA;;AACA,gBAAI,CAACsB,IAAI,CAACG,KAAL,CAAWM,qBAAX,CAAiCD,OAAtC,EAA+C;AAC7CR,cAAAA,IAAI,CAACG,KAAL,CAAWO,eAAX,GAA6B,IAA7B;AACD;AACF,WAnBoC,CAoBrC;;;AACA,gBAAMC,IAAI,GAAG,IAAI/D,MAAM,CAACgE,IAAP,CAAYC,SAAhB,CACXb,IAAI,CAACG,KAAL,CAAWM,qBAAX,CAAiCE,IADtB,CAAb;AAGA,gBAAMG,KAAK,GAAG,CAAC,MAAM1D,aAAa,CAACuD,IAAD,EAAOjB,YAAY,CAACC,SAApB,CAApB,EAAoD,CAApD,CAAd;;AAEA,cAAI;AACF,kBAAMoB,OAAO,GAAG,MAAMnD,KAAK,CAACqC,UAAN,CAAiBe,sBAAjB,CACpBF,KADoB,CAAtB;AAGA,gBAAIG,KAAK,GAAGC,QAAQ,CAACH,OAAO,CAACI,KAAR,CAAcC,MAAf,CAAR,GAAiC,CAA7C,CAJE,CAKF;;AACAlC,YAAAA,kBAAkB,CAAC+B,KAAD,CAAlB;AACAf,YAAAA,MAAM,GAAIM,OAAO,IAAIS,KAAZ,IAAsBf,MAA/B;AACD,WARD,CAQE,OAAOmB,CAAP,EAAU;AACVnC,YAAAA,kBAAkB,CAAC,KAAD,CAAlB,CADU,CAEV;;AACA,gBAAIc,IAAI,CAACG,KAAL,CAAWO,eAAf,EAAgC;AAC9BR,cAAAA,MAAM,GAAG,KAAT;AACD;;AACDoB,YAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,SArDC,CAsDF;;;AACA,YAAIrB,IAAJ,aAAIA,IAAJ,wCAAIA,IAAI,CAAEG,KAAN,CAAYqB,WAAhB,kDAAI,sBAAyBC,cAAzB,CAAwCC,IAA5C,EAAkD;AAChD5C,UAAAA,UAAU,CAAC3B,MAAM,CAAC6C,IAAI,CAACG,KAAL,CAAWqB,WAAX,CAAuBG,MAAxB,CAAP,CAAV;;AACA,cACE3B,IAAI,CAACG,KAAL,CAAWqB,WAAX,CAAuBG,MAAvB,CAA8BtB,QAA9B,KACA,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAFzB,EAGE;AACAL,YAAAA,MAAM,GAAG,KAAT;AACD;AACF,SA/DC,CAgEF;;;AACA,YAAIF,IAAJ,aAAIA,IAAJ,yCAAIA,IAAI,CAAEG,KAAN,CAAYqB,WAAhB,mDAAI,uBAAyBC,cAAzB,CAAwCL,MAA5C,EAAoD;AAClD,cAAIQ,KAAK,GAAGC,IAAI,CAACC,GAAL,CACV9B,IAAI,CAACG,KAAL,CAAWqB,WAAX,CAAuBG,MAAvB,CAA8BtB,QAA9B,EADU,EAEVL,IAAI,CAACG,KAAL,CAAW4B,cAFD,CAAZ;;AAIA,cAAI/B,IAAI,CAACG,KAAL,CAAW6B,aAAX,GAA2BJ,KAA/B,EAAsC;AACpC5C,YAAAA,iBAAiB,CAAC4C,KAAK,GAAG5B,IAAI,CAACG,KAAL,CAAW6B,aAApB,CAAjB;AACD,WAFD,MAEO;AACLhD,YAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAgB,YAAAA,IAAI,CAACG,KAAL,CAAW8B,SAAX,GAAuB,IAAvB;AACD;AACF,SAXD,MAWO;AACLjD,UAAAA,iBAAiB,CAACgB,IAAI,CAACG,KAAL,CAAWpB,cAAZ,CAAjB;AACD;;AAED,YAAIiB,IAAI,CAACG,KAAL,CAAW8B,SAAf,EAA0B;AACxB/B,UAAAA,MAAM,GAAG,KAAT;AACD;;AAEDtB,QAAAA,WAAW,CAAEoB,IAAI,CAACG,KAAL,CAAWxB,QAAX,GAAsBuB,MAAxB,CAAX;AACAd,QAAAA,YAAY,CAAEY,IAAI,CAACG,KAAL,CAAWhB,SAAX,GAAuBqB,OAAzB,CAAZ;AACApC,QAAAA,eAAe,CAAC4B,IAAD,CAAf;AACD,OAvFD,CAuFE,OAAOqB,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GAlG2C,EAkGzC,CAAC3B,YAAD,EAAe9B,KAAK,CAACmC,cAArB,EAAqCnC,KAAK,CAACqC,UAA3C,CAlGyC,CAA5C;;AAoGA,QAAMiC,MAAM,GAAG,YAAY;AACzB,QAAI;AAAA;;AACFlE,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,+BAAAmE,QAAQ,CAACC,cAAT,CAAwB,WAAxB,iFAAsCC,KAAtC;;AACA,UAAI5C,MAAM,CAAC6C,SAAP,IAAoBnE,YAApB,aAAoBA,YAApB,eAAoBA,YAAY,CAAEoE,OAAlC,IAA6C9C,MAAM,CAACE,SAAxD,EAAmE;AACjE,cAAM6C,QAAQ,GAAG,CACf,MAAMtF,YAAY,CAACiB,YAAD,EAAesB,MAAM,CAACE,SAAtB,CADH,EAEf,CAFe,CAAjB;AAIA,YAAI8C,MAAW,GAAG;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAlB;;AACA,YAAIF,QAAJ,EAAc;AACZC,UAAAA,MAAM,GAAG,MAAMzF,qCAAqC,CAClDwF,QADkD,EAElD5E,KAAK,CAAC+E,SAF4C,EAGlD/E,KAAK,CAACqC,UAH4C,EAIlD,IAJkD,CAApD;AAMD;;AAED,YAAIwC,MAAM,IAAI,CAACA,MAAM,CAACC,GAAtB,EAA2B;AACzB;AACA;AACA,cAAIE,SAAS,GAAG7D,cAAc,GAAI,CAAlC;AACAC,UAAAA,iBAAiB,CAAC4D,SAAD,CAAjB;AACAhE,UAAAA,WAAW,CAAET,YAAY,CAACgC,KAAb,CAAmBxB,QAAnB,GAA8BiE,SAAS,GAAG,CAA5C,CAAX;AACAzE,UAAAA,YAAY,CAACgC,KAAb,CAAmB8B,SAAnB,GAA+BW,SAAS,KAAK,CAA7C;AACAtE,UAAAA,aAAa,CAAC;AACZC,YAAAA,IAAI,EAAE,IADM;AAEZC,YAAAA,OAAO,EAAE,kCAFG;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAAD,CAAb;AAKD,SAZD,MAYO;AACLH,UAAAA,aAAa,CAAC;AACZC,YAAAA,IAAI,EAAE,IADM;AAEZC,YAAAA,OAAO,EAAE,gCAFG;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAAD,CAAb;AAKD;AACF;AACF,KAtCD,CAsCE,OAAOoE,KAAP,EAAmB;AACnB,UAAIrE,OAAO,GAAGqE,KAAK,CAACC,GAAN,IAAa,mCAA3B;;AACA,UAAI,CAACD,KAAK,CAACC,GAAX,EAAgB;AACd,YAAI,CAACD,KAAK,CAACrE,OAAX,EAAoB;AAClBA,UAAAA,OAAO,GAAG,wCAAV;AACD,SAFD,MAEO,IAAIqE,KAAK,CAACrE,OAAN,CAAcuE,OAAd,CAAsB,OAAtB,CAAJ,EAAoC;AACzCvE,UAAAA,OAAO,GAAI,WAAX;AACD,SAFM,MAEA,IAAIqE,KAAK,CAACrE,OAAN,CAAcuE,OAAd,CAAsB,OAAtB,CAAJ,EAAoC;AACzCvE,UAAAA,OAAO,GAAI,sDAAX;AACD;AACF,OARD,MAQO;AACL,YAAIqE,KAAK,CAACG,IAAN,KAAe,GAAnB,EAAwB;AACtBxE,UAAAA,OAAO,GAAI,WAAX;AACAyE,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,SAHD,MAGO,IAAIN,KAAK,CAACG,IAAN,KAAe,GAAnB,EAAwB;AAC7BxE,UAAAA,OAAO,GAAI,oCAAX;AACD;AACF;;AAEDF,MAAAA,aAAa,CAAC;AACZC,QAAAA,IAAI,EAAE,IADM;AAEZC,QAAAA,OAFY;AAGZC,QAAAA,QAAQ,EAAE;AAHE,OAAD,CAAb,CAnBmB,CAwBnB;AACA;;AACAqB,MAAAA,wBAAwB;AACzB,KAjED,SAiEU;AACR9B,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,GArED;;AAuEA,QAAMoF,gBAAgB,GAAG,MAAM;AAC7B,QAAIlD,MAAM,GAAG,CAACvB,QAAD,IAAaQ,SAA1B;;AAEA,QAAIe,MAAJ,EAAY;AACV,UAAI/B,YAAY,CAAEgC,KAAd,CAAoBO,eAApB,IAAuC,CAACzB,eAA5C,EAA6D;AAC3DiB,QAAAA,MAAM,GAAG,KAAT;AACD;;AACD,UAAIrB,OAAO,IAAIyB,IAAI,CAAC+C,GAAL,MAAcxE,OAAO,CAAC0B,OAAR,EAA7B,EAAgD;AAC9CL,QAAAA,MAAM,GAAG,KAAT;AACD;AACF;;AAED,QACEf,SAAS,IACThB,YAAY,CAAEgC,KAAd,CAAoBC,UADpB,IAEAjC,YAAY,CAAEgC,KAAd,CAAoBC,UAApB,CAA+BC,QAA/B,MAA6C,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAHtE,EAIE;AACAnB,MAAAA,YAAY,CAAEjB,YAAY,CAAEgC,KAAd,CAAoBhB,SAApB,GAAgC,KAAlC,CAAZ;AACD;;AAEDP,IAAAA,WAAW,CAAET,YAAY,CAAEgC,KAAd,CAAoBxB,QAApB,GAA+BuB,MAAjC,CAAX;AACD,GArBD;;AAuBA,QAAMoD,MAAM,GAAG,MAAOzF,IAAP,IAAwB;AACrCyD,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAMgC,GAAG,GAAG,MAAMhG,SAAS,CAACM,IAAD,CAA3B;AACAK,IAAAA,MAAM,CAACqF,GAAD,CAAN;AACAjC,IAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ,EAAiB,MAAjB;AACD,GALD;;AAOA/G,EAAAA,SAAS,CAAC,MAAM;AACd8G,IAAAA,MAAM,CAACzF,IAAD,CAAN;AACD,GAFQ,EAEN,CACD6B,YADC,EAED9B,KAAK,CAACmC,cAFL,EAGDnC,KAAK,CAACqC,UAHL,EAIDH,wBAJC,CAFM,CAAT;AASA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAE7B;AAAZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CA7PD;;GAAMN,I;UAkBWb,S;;;KAlBXa,I;;AA+PN,MAAM6F,gBAAgB,GACpBrF,YADuB,IAEF;AAAA;;AACrB,MACEA,YAAY,CAACgC,KAAb,CAAmBxB,QAAnB,6BACAR,YAAY,CAACgC,KAAb,CAAmBqB,WADnB,kDACA,sBAAgCC,cAAhC,CAA+CC,IAFjD,EAGE;AACA,WAAOvE,MAAM,CAACgB,YAAY,CAACgC,KAAb,CAAmBqB,WAAnB,CAA+BG,MAAhC,CAAb;AACD;;AAED,SAAOxE,MAAM,CACXgB,YAAY,CAACgC,KAAb,CAAmBC,UAAnB,GACIjC,YAAY,CAACgC,KAAb,CAAmBC,UADvB,GAEIjC,YAAY,CAACgC,KAAb,CAAmBhB,SAAnB,GACA,IAAIvC,MAAM,CAAC6G,EAAX,CAAc,IAAInD,IAAJ,GAAWC,OAAX,KAAuB,IAArC,CADA,GAEA7B,SALO,CAAb;AAOD,CAjBD;;AAmBA,eAAef,IAAf","sourcesContent":["import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport Header from \"./header/Header\";\nimport Body from \"./body/body\";\nimport ItemDetail from \"./ItemDetail/ItemDetail\";\nimport { getAllNft } from \"./service/api\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [page, setPage] = useState(0);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [nft, setNft] = useState([]);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  const getNft = async (page: number) => {\n    console.log(\"1\");\n    const res = await getAllNft(page);\n    setNft(res);\n    console.log(res, \"res \");\n  };\n\n  useEffect(() => {\n    getNft(page);\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <>\n      <Header />\n      <Body data={nft} />\n    </>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}