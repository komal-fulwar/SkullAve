{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport BloctoSDK from '@blocto/sdk';\nimport { BaseWalletAdapter, WalletAccountError, WalletAdapterNetwork, WalletConnectionError, WalletDisconnectionError, WalletNotConnectedError, WalletNotFoundError, WalletPublicKeyError, WalletSendTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class BloctoWalletAdapter extends BaseWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    this._network = config.network || WalletAdapterNetwork.Mainnet;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return true;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._publicKey;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = new BloctoSDK({\n          solana: {\n            net: this._network\n          }\n        }).solana;\n        if (!wallet) throw new WalletNotFoundError();\n\n        if (!wallet.connected) {\n          try {\n            yield wallet.connect();\n          } catch (error) {\n            throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          }\n        }\n\n        const account = wallet.accounts[0];\n        if (!account) throw new WalletAccountError();\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          yield wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          transaction.feePayer || (transaction.feePayer = this.publicKey || undefined);\n          transaction.recentBlockhash || (transaction.recentBlockhash = (yield connection.getRecentBlockhash('finalized')).blockhash);\n          const {\n            signers\n          } = options;\n\n          if (signers === null || signers === void 0 ? void 0 : signers.length) {\n            transaction = yield wallet.convertToProgramWalletTransaction(transaction);\n            transaction.partialSign(...signers);\n          }\n\n          return yield wallet.signAndSendTransaction(transaction, connection);\n        } catch (error) {\n          throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BloctoSDK","BaseWalletAdapter","WalletAccountError","WalletAdapterNetwork","WalletConnectionError","WalletDisconnectionError","WalletNotConnectedError","WalletNotFoundError","WalletPublicKeyError","WalletSendTransactionError","PublicKey","BloctoWalletAdapter","constructor","config","_connecting","_wallet","_publicKey","_network","network","Mainnet","publicKey","ready","connecting","connected","connect","wallet","solana","net","error","message","account","accounts","emit","disconnect","sendTransaction","transaction","connection","options","feePayer","undefined","recentBlockhash","getRecentBlockhash","blockhash","signers","length","convertToProgramWalletTransaction","partialSign","signAndSendTransaction"],"sourceRoot":"","sources":["../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}