{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\n\nvar buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\n\n\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\n\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\n\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\n\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\n\nvar Layout =\n/** @class */\nfunction () {\n  function Layout(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n\n\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n\n\n  Layout.prototype.makeDestinationObject = function () {\n    return {};\n  };\n  /**\n   * Decode from a Uint8Array into a JavaScript value.\n   *\n   * @param {Uint8Array} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n\n\n  Layout.prototype.decode = function (b, offset) {\n    throw new Error('Layout is abstract');\n  };\n  /**\n   * Encode a JavaScript value into a Uint8Array.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Uint8Array} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n\n\n  Layout.prototype.encode = function (src, b, offset) {\n    throw new Error('Layout is abstract');\n  };\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Uint8Array} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n\n\n  Layout.prototype.getSpan = function (b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n\n    return this.span;\n  };\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n\n\n  Layout.prototype.replicate = function (property) {\n    var rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  };\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n\n\n  Layout.prototype.fromArray = function (values) {\n    return undefined;\n  };\n\n  return Layout;\n}();\n\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\n\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n\n  return name;\n}\n\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function (b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function (b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\n\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\n\nvar ExternalLayout =\n/** @class */\nfunction (_super) {\n  __extends(ExternalLayout, _super);\n\n  function ExternalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n\n\n  ExternalLayout.prototype.isCount = function () {\n    throw new Error('ExternalLayout is abstract');\n  };\n\n  return ExternalLayout;\n}(Layout);\n\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\n\nvar GreedyCount =\n/** @class */\nfunction (_super) {\n  __extends(GreedyCount, _super);\n\n  function GreedyCount(elementSpan, property) {\n    var _this = this;\n\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n\n    _this = _super.call(this, -1, property) || this;\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n\n\n  GreedyCount.prototype.isCount = function () {\n    return true;\n  };\n  /** @override */\n\n\n  GreedyCount.prototype.decode = function (b, offset) {\n    checkUint8Array(b);\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  };\n  /** @override */\n\n\n  GreedyCount.prototype.encode = function (src, b, offset) {\n    return 0;\n  };\n\n  return GreedyCount;\n}(ExternalLayout);\n\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\n\nvar OffsetLayout =\n/** @class */\nfunction (_super) {\n  __extends(OffsetLayout, _super);\n\n  function OffsetLayout(layout, offset, property) {\n    var _this = this;\n\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    _this = _super.call(this, layout.span, property || layout.property) || this;\n    /** The subordinated layout. */\n\n    _this.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n\n    _this.offset = offset;\n    return _this;\n  }\n  /** @override */\n\n\n  OffsetLayout.prototype.isCount = function () {\n    return this.layout instanceof UInt || this.layout instanceof UIntBE;\n  };\n  /** @override */\n\n\n  OffsetLayout.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return this.layout.decode(b, offset + this.offset);\n  };\n  /** @override */\n\n\n  OffsetLayout.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return this.layout.encode(src, b, offset + this.offset);\n  };\n\n  return OffsetLayout;\n}(ExternalLayout);\n\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UInt =\n/** @class */\nfunction (_super) {\n  __extends(UInt, _super);\n\n  function UInt(span, property) {\n    var _this = _super.call(this, span, property) || this;\n\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this;\n  }\n  /** @override */\n\n\n  UInt.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n  };\n  /** @override */\n\n\n  UInt.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n    return this.span;\n  };\n\n  return UInt;\n}(Layout);\n\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UIntBE =\n/** @class */\nfunction (_super) {\n  __extends(UIntBE, _super);\n\n  function UIntBE(span, property) {\n    var _this = _super.call(this, span, property) || this;\n\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this;\n  }\n  /** @override */\n\n\n  UIntBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n  };\n  /** @override */\n\n\n  UIntBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n    return this.span;\n  };\n\n  return UIntBE;\n}(Layout);\n\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Int =\n/** @class */\nfunction (_super) {\n  __extends(Int, _super);\n\n  function Int(span, property) {\n    var _this = _super.call(this, span, property) || this;\n\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this;\n  }\n  /** @override */\n\n\n  Int.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n  };\n  /** @override */\n\n\n  Int.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n    return this.span;\n  };\n\n  return Int;\n}(Layout);\n\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar IntBE =\n/** @class */\nfunction (_super) {\n  __extends(IntBE, _super);\n\n  function IntBE(span, property) {\n    var _this = _super.call(this, span, property) || this;\n\n    if (6 < _this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this;\n  }\n  /** @override */\n\n\n  IntBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n  };\n  /** @override */\n\n\n  IntBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n    return this.span;\n  };\n\n  return IntBE;\n}(Layout);\n\nexports.IntBE = IntBE;\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\n\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\n\n\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearUInt64 =\n/** @class */\nfunction (_super) {\n  __extends(NearUInt64, _super);\n\n  function NearUInt64(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  NearUInt64.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var buffer = uint8ArrayToBuffer(b);\n    var lo32 = buffer.readUInt32LE(offset);\n    var hi32 = buffer.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n\n\n  NearUInt64.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  };\n\n  return NearUInt64;\n}(Layout);\n\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearUInt64BE =\n/** @class */\nfunction (_super) {\n  __extends(NearUInt64BE, _super);\n\n  function NearUInt64BE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  NearUInt64BE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var buffer = uint8ArrayToBuffer(b);\n    var hi32 = buffer.readUInt32BE(offset);\n    var lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n\n\n  NearUInt64BE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  };\n\n  return NearUInt64BE;\n}(Layout);\n\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64 =\n/** @class */\nfunction (_super) {\n  __extends(NearInt64, _super);\n\n  function NearInt64(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  NearInt64.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var buffer = uint8ArrayToBuffer(b);\n    var lo32 = buffer.readUInt32LE(offset);\n    var hi32 = buffer.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n\n\n  NearInt64.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  };\n\n  return NearInt64;\n}(Layout);\n\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64BE =\n/** @class */\nfunction (_super) {\n  __extends(NearInt64BE, _super);\n\n  function NearInt64BE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  NearInt64BE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var buffer = uint8ArrayToBuffer(b);\n    var hi32 = buffer.readInt32BE(offset);\n    var lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  };\n  /** @override */\n\n\n  NearInt64BE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var split = divmodInt64(src);\n    var buffer = uint8ArrayToBuffer(b);\n    buffer.writeInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  };\n\n  return NearInt64BE;\n}(Layout);\n\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Float =\n/** @class */\nfunction (_super) {\n  __extends(Float, _super);\n\n  function Float(property) {\n    return _super.call(this, 4, property) || this;\n  }\n  /** @override */\n\n\n  Float.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readFloatLE(offset);\n  };\n  /** @override */\n\n\n  Float.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n    return 4;\n  };\n\n  return Float;\n}(Layout);\n\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar FloatBE =\n/** @class */\nfunction (_super) {\n  __extends(FloatBE, _super);\n\n  function FloatBE(property) {\n    return _super.call(this, 4, property) || this;\n  }\n  /** @override */\n\n\n  FloatBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readFloatBE(offset);\n  };\n  /** @override */\n\n\n  FloatBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n    return 4;\n  };\n\n  return FloatBE;\n}(Layout);\n\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Double =\n/** @class */\nfunction (_super) {\n  __extends(Double, _super);\n\n  function Double(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  Double.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readDoubleLE(offset);\n  };\n  /** @override */\n\n\n  Double.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n    return 8;\n  };\n\n  return Double;\n}(Layout);\n\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar DoubleBE =\n/** @class */\nfunction (_super) {\n  __extends(DoubleBE, _super);\n\n  function DoubleBE(property) {\n    return _super.call(this, 8, property) || this;\n  }\n  /** @override */\n\n\n  DoubleBE.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return uint8ArrayToBuffer(b).readDoubleBE(offset);\n  };\n  /** @override */\n\n\n  DoubleBE.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n    return 8;\n  };\n\n  return DoubleBE;\n}(Layout);\n\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Sequence =\n/** @class */\nfunction (_super) {\n  __extends(Sequence, _super);\n\n  function Sequence(elementLayout, count, property) {\n    var _this = this;\n\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n\n    _this = _super.call(this, span, property) || this;\n    /** The layout for individual elements of the sequence. */\n\n    _this.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n\n    _this.count = count;\n    return _this;\n  }\n  /** @override */\n\n\n  Sequence.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var span = 0;\n    var count = this.count;\n\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      var idx = 0;\n\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n\n    return span;\n  };\n  /** @override */\n\n\n  Sequence.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var rv = [];\n    var i = 0;\n    var count = this.count;\n\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n\n    return rv;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n\n\n  Sequence.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var elo = this.elementLayout;\n    var span = src.reduce(function (span, v) {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n\n    return span;\n  };\n\n  return Sequence;\n}(Layout);\n\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\n\nvar Structure =\n/** @class */\nfunction (_super) {\n  __extends(Structure, _super);\n\n  function Structure(fields, property, decodePrefixes) {\n    var _this = this;\n\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n\n\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var fd = fields_1[_i];\n\n      if (0 > fd.span && undefined === fd.property) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    var span = -1;\n\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {// ignore error\n    }\n\n    _this = _super.call(this, span, property) || this;\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n\n    _this.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n\n    _this.decodePrefixes = !!decodePrefixes;\n    return _this;\n  }\n  /** @override */\n\n\n  Structure.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var span = 0;\n\n    try {\n      span = this.fields.reduce(function (span, fd) {\n        var fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n\n    return span;\n  };\n  /** @override */\n\n\n  Structure.prototype.decode = function (b, offset) {\n    checkUint8Array(b);\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var dest = this.makeDestinationObject();\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n\n      offset += fd.getSpan(b, offset);\n\n      if (this.decodePrefixes && b.length === offset) {\n        break;\n      }\n    }\n\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n\n\n  Structure.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var firstOffset = offset;\n    var lastOffset = 0;\n    var lastWrote = 0;\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n      var span = fd.span;\n      lastWrote = 0 < span ? span : 0;\n\n      if (undefined !== fd.property) {\n        var fv = src[fd.property];\n\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n\n\n    return lastOffset + lastWrote - firstOffset;\n  };\n  /** @override */\n\n\n  Structure.prototype.fromArray = function (values) {\n    var dest = this.makeDestinationObject();\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (undefined !== fd.property && 0 < values.length) {\n        dest[fd.property] = values.shift();\n      }\n    }\n\n    return dest;\n  };\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n\n\n  Structure.prototype.layoutFor = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n\n\n  Structure.prototype.offsetOf = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    var offset = 0;\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (fd.property === property) {\n        return offset;\n      }\n\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n\n    return undefined;\n  };\n\n  return Structure;\n}(Layout);\n\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\n\nvar UnionDiscriminator =\n/** @class */\nfunction () {\n  function UnionDiscriminator(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n\n\n  UnionDiscriminator.prototype.decode = function (b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  };\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n\n\n  UnionDiscriminator.prototype.encode = function (src, b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  };\n\n  return UnionDiscriminator;\n}();\n\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\n\nvar UnionLayoutDiscriminator =\n/** @class */\nfunction (_super) {\n  __extends(UnionLayoutDiscriminator, _super);\n\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this = this;\n\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    _this = _super.call(this, property || layout.property || 'variant') || this;\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n\n    _this.layout = layout;\n    return _this;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  UnionLayoutDiscriminator.prototype.decode = function (b, offset) {\n    return this.layout.decode(b, offset);\n  };\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  UnionLayoutDiscriminator.prototype.encode = function (src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  };\n\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\n\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Union =\n/** @class */\nfunction (_super) {\n  __extends(Union, _super);\n\n  function Union(discr, defaultLayout, property) {\n    var _this = this;\n\n    var upv = discr instanceof UInt || discr instanceof UIntBE;\n    var discriminator;\n\n    if (upv) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n\n\n    var span = -1;\n\n    if (defaultLayout) {\n      span = defaultLayout.span;\n\n      if (0 <= span && upv) {\n        span += discriminator.layout.span;\n      }\n    }\n\n    _this = _super.call(this, span, property) || this;\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n\n    _this.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n\n    _this.usesPrefixDiscriminator = upv;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n\n    _this.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n\n    _this.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n\n    var boundGetSourceVariant = _this.defaultGetSourceVariant.bind(_this);\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n\n\n    _this.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n\n\n    _this.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n\n    return _this;\n  }\n  /** @override */\n\n\n  Union.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n\n\n    var vlo = this.getVariant(b, offset);\n\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n\n    return vlo.getSpan(b, offset);\n  };\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisfied rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n\n\n  Union.prototype.defaultGetSourceVariant = function (src) {\n    if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n      if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n        return undefined;\n      }\n\n      var vlo = this.registry[src[this.discriminator.property]];\n\n      if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (var tag in this.registry) {\n        var vlo = this.registry[tag];\n\n        if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n\n    throw new Error('unable to infer src variant');\n  };\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n\n\n  Union.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var dest;\n    var dlo = this.discriminator;\n    var discr = dlo.decode(b, offset);\n    var clo = this.registry[discr];\n\n    if (undefined === clo) {\n      var defaultLayout = this.defaultLayout;\n      var contentOffset = 0;\n\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n\n\n  Union.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var vlo = this.getSourceVariant(src);\n\n    if (undefined === vlo) {\n      var dlo = this.discriminator; // this.defaultLayout is not undefined when vlo is undefined\n\n      var clo = this.defaultLayout;\n      var contentOffset = 0;\n\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n\n      dlo.encode(src[dlo.property], b, offset); // clo.property is not undefined when vlo is undefined\n\n      return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n    }\n\n    return vlo.encode(src, b, offset);\n  };\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n\n\n  Union.prototype.addVariant = function (variant, layout, property) {\n    var rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  };\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Uint8Array)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Uint8Array}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n\n\n  Union.prototype.getVariant = function (vb, offset) {\n    var variant;\n\n    if (vb instanceof Uint8Array) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      variant = this.discriminator.decode(vb, offset);\n    } else {\n      variant = vb;\n    }\n\n    return this.registry[variant];\n  };\n\n  return Union;\n}(Layout);\n\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\n\nvar VariantLayout =\n/** @class */\nfunction (_super) {\n  __extends(VariantLayout, _super);\n\n  function VariantLayout(union, variant, layout, property) {\n    var _this = this;\n\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n\n    var span = union.span;\n\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n\n    _this = _super.call(this, span, property) || this;\n    /** The {@link Union} to which this variant belongs. */\n\n    _this.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n\n    _this.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n\n    _this.layout = layout || null;\n    return _this;\n  }\n  /** @override */\n\n\n  VariantLayout.prototype.getSpan = function (b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n\n\n    var span = 0;\n\n    if (this.layout) {\n      span = this.layout.getSpan(b, offset + contentOffset);\n    }\n\n    return contentOffset + span;\n  };\n  /** @override */\n\n\n  VariantLayout.prototype.decode = function (b, offset) {\n    var dest = this.makeDestinationObject();\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n\n    var contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    } // VariantLayout property is never undefined\n\n\n    var property = this.property;\n\n    if (this.layout) {\n      dest[property] = this.layout.decode(b, offset + contentOffset);\n    } else if (property) {\n      dest[property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n\n    return dest;\n  };\n  /** @override */\n\n\n  VariantLayout.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    } // VariantLayout property is never undefined\n\n\n    var property = this.property;\n\n    if (this.layout && !Object.prototype.hasOwnProperty.call(src, property)) {\n      throw new TypeError('variant lacks property ' + property);\n    }\n\n    this.union.discriminator.encode(this.variant, b, offset);\n    var span = contentOffset;\n\n    if (this.layout) {\n      this.layout.encode(src[property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n\n      if (0 <= this.union.span && span > this.union.span) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n\n    return span;\n  };\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n\n\n  VariantLayout.prototype.fromArray = function (values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n\n    return undefined;\n  };\n\n  return VariantLayout;\n}(Layout);\n\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\n\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar BitStructure =\n/** @class */\nfunction (_super) {\n  __extends(BitStructure, _super);\n\n  function BitStructure(word, msb, property) {\n    var _this = this;\n\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n\n    _this = _super.call(this, word.span, property) || this;\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n\n    _this.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n\n    _this.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n\n    _this.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n\n    var value = 0;\n\n    _this._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n\n    _this._packedGetValue = function () {\n      return value;\n    };\n\n    return _this;\n  }\n  /** @override */\n\n\n  BitStructure.prototype.decode = function (b, offset) {\n    var dest = this.makeDestinationObject();\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var value = this.word.decode(b, offset);\n\n    this._packedSetValue(value);\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n\n    return dest;\n  };\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n\n\n  BitStructure.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var value = this.word.decode(b, offset);\n\n    this._packedSetValue(value);\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (undefined !== fd.property) {\n        var fv = src[fd.property];\n\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n\n    return this.word.encode(this._packedGetValue(), b, offset);\n  };\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n\n\n  BitStructure.prototype.addField = function (bits, property) {\n    var bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  };\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n\n\n  BitStructure.prototype.addBoolean = function (property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    var bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  };\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n\n\n  BitStructure.prototype.fieldFor = function (property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var fd = _a[_i];\n\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n\n    return undefined;\n  };\n\n  return BitStructure;\n}(Layout);\n\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\n\nvar BitField =\n/** @class */\nfunction () {\n  function BitField(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n\n\n    this.container = container;\n    /** The span of this value in bits. */\n\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n\n    this.valueMask = (1 << bits) - 1;\n\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n\n\n    this.start = usedBits;\n\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n\n\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n\n\n  BitField.prototype.decode = function (b, offset) {\n    var word = this.container._packedGetValue();\n\n    var wordValue = fixBitwiseResult(word & this.wordMask);\n    var value = wordValue >>> this.start;\n    return value;\n  };\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n\n\n  BitField.prototype.encode = function (value) {\n    if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n      throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n    }\n\n    var word = this.container._packedGetValue();\n\n    var wordValue = fixBitwiseResult(value << this.start);\n\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n  };\n\n  return BitField;\n}();\n\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n\n/* eslint-disable no-extend-native */\n\nvar Boolean =\n/** @class */\nfunction (_super) {\n  __extends(Boolean, _super);\n\n  function Boolean(container, property) {\n    return _super.call(this, container, 1, property) || this;\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n\n\n  Boolean.prototype.decode = function (b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  };\n  /** @override */\n\n\n  Boolean.prototype.encode = function (value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n\n    return BitField.prototype.encode.call(this, value);\n  };\n\n  return Boolean;\n}(BitField);\n\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Blob =\n/** @class */\nfunction (_super) {\n  __extends(Blob, _super);\n\n  function Blob(length, property) {\n    var _this = this;\n\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n\n    _this = _super.call(this, span, property) || this;\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n\n    _this.length = length;\n    return _this;\n  }\n  /** @override */\n\n\n  Blob.prototype.getSpan = function (b, offset) {\n    var span = this.span;\n\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n\n    return span;\n  };\n  /** @override */\n\n\n  Blob.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var span = this.span;\n\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n\n    return uint8ArrayToBuffer(b).slice(offset, offset + span);\n  };\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n\n\n  Blob.prototype.encode = function (src, b, offset) {\n    var span = this.length;\n\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n\n    if (!(src instanceof Uint8Array && span === src.length)) {\n      throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n    }\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Uint8Array');\n    }\n\n    var srcBuffer = uint8ArrayToBuffer(src);\n    uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n\n    return span;\n  };\n\n  return Blob;\n}(Layout);\n\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar CString =\n/** @class */\nfunction (_super) {\n  __extends(CString, _super);\n\n  function CString(property) {\n    return _super.call(this, -1, property) || this;\n  }\n  /** @override */\n\n\n  CString.prototype.getSpan = function (b, offset) {\n    checkUint8Array(b);\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var idx = offset;\n\n    while (idx < b.length && 0 !== b[idx]) {\n      idx += 1;\n    }\n\n    return 1 + idx - offset;\n  };\n  /** @override */\n\n\n  CString.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var span = this.getSpan(b, offset);\n    return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n  };\n  /** @override */\n\n\n  CString.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n\n\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n\n    var srcb = buffer_1.Buffer.from(src, 'utf8');\n    var span = srcb.length;\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n\n    var buffer = uint8ArrayToBuffer(b);\n    srcb.copy(buffer, offset);\n    buffer[offset + span] = 0;\n    return span + 1;\n  };\n\n  return CString;\n}(Layout);\n\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UTF8 =\n/** @class */\nfunction (_super) {\n  __extends(UTF8, _super);\n\n  function UTF8(maxSpan, property) {\n    var _this = this;\n\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    _this = _super.call(this, -1, property) || this;\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n\n    _this.maxSpan = maxSpan;\n    return _this;\n  }\n  /** @override */\n\n\n  UTF8.prototype.getSpan = function (b, offset) {\n    checkUint8Array(b);\n\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    return b.length - offset;\n  };\n  /** @override */\n\n\n  UTF8.prototype.decode = function (b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n\n    var span = this.getSpan(b, offset);\n\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n\n    return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n  };\n  /** @override */\n\n\n  UTF8.prototype.encode = function (src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n\n\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n\n    var srcb = buffer_1.Buffer.from(src, 'utf8');\n    var span = srcb.length;\n\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n\n    srcb.copy(uint8ArrayToBuffer(b), offset);\n    return span;\n  };\n\n  return UTF8;\n}(Layout);\n\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Constant =\n/** @class */\nfunction (_super) {\n  __extends(Constant, _super);\n\n  function Constant(value, property) {\n    var _this = _super.call(this, 0, property) || this;\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n\n\n    _this.value = value;\n    return _this;\n  }\n  /** @override */\n\n\n  Constant.prototype.decode = function (b, offset) {\n    return this.value;\n  };\n  /** @override */\n\n\n  Constant.prototype.encode = function (src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  };\n\n  return Constant;\n}(Layout);\n\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\n\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\n\n\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\n\n\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\n\n\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\n\n\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n\n\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\n\n\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n\n\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\n\n\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\n\n\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\n\n\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\n\n\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\n\n\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\n\n\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\n\n\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\n\n\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\n\n\nexports.constant = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"mappings":"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","names":["checkUint8Array","b","Uint8Array","TypeError","exports","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","span","property","Number","isInteger","Layout","offset","Error","src","RangeError","rv","Object","create","constructor","prototype","assign","values","undefined","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","layout_","boundConstructor_","makeDestinationObject","defineProperty","value","encode","writable","decode","__extends","ExternalLayout","elementSpan","_this","GreedyCount","rem","Math","floor","OffsetLayout","UInt","UIntBE","_super","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","elementLayout","count","isCount","Sequence","idx","getSpan","i","push","elo","reduce","v","fields","decodePrefixes","Array","isArray","acc","_i","fd","e","Structure","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","discr","defaultLayout","upv","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","Union","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","word","msb","_packedSetValue","_packedGetValue","BitStructure","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","srcb","copy","maxSpan","UTF8","Constant"],"sourceRoot":"","sources":["../src/Layout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}