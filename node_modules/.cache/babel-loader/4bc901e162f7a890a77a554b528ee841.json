{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n  const errors = new Map();\n\n  if (idl.errors) {\n    idl.errors.forEach(e => {\n      var _a;\n\n      let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n\n  return errors;\n} // Allow either IdLInstruction or IdlStateMethod since the types share fields.\n\nexport function toInstruction(idlIx) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n\n  const ix = {};\n  let idx = 0;\n  idlIx.args.forEach(ixArg => {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n} // Throws error if any account required for the `ix` is not given.\n\nexport function validateAccounts(ixAccounts) {\n  let accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ixAccounts.forEach(acc => {\n    if (\"accounts\" in acc) {\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n      }\n    }\n  });\n} // Translates an address to a Pubkey.\n\nexport function translateAddress(address) {\n  if (typeof address === \"string\") {\n    const pk = new PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAT,QAA0B,iBAA1B;AASA,OAAM,SAAUC,cAAV,CAAyBC,GAAzB,EAAiC;AACrC,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AACA,MAAIF,GAAG,CAACC,MAAR,EAAgB;AACdD,OAAG,CAACC,MAAJ,CAAWE,OAAX,CAAoBC,CAAD,IAAM;;;AACvB,UAAIC,GAAG,GAAG,OAAC,CAACA,GAAF,MAAK,IAAL,IAAKC,aAAL,GAAKA,EAAL,GAASF,CAAC,CAACG,IAArB;AACAN,YAAM,CAACO,GAAP,CAAWJ,CAAC,CAACK,IAAb,EAAmBJ,GAAnB;AACD,KAHD;AAID;;AACD,SAAOJ,MAAP;AACD,C,CAED;;AACA,OAAM,SAAUS,aAAV,CACJC,KADI,EAEU;AAAA,oCAAXC,IAAW;AAAXA,QAAW;AAAA;;AAEd,MAAID,KAAK,CAACC,IAAN,CAAWC,MAAX,IAAqBD,IAAI,CAACC,MAA9B,EAAsC;AACpC,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAMC,EAAE,GAA2B,EAAnC;AACA,MAAIC,GAAG,GAAG,CAAV;AACAL,OAAK,CAACC,IAAN,CAAWT,OAAX,CAAoBc,KAAD,IAAU;AAC3BF,MAAE,CAACE,KAAK,CAACV,IAAP,CAAF,GAAiBK,IAAI,CAACI,GAAD,CAArB;AACAA,OAAG,IAAI,CAAP;AACD,GAHD;AAKA,SAAOD,EAAP;AACD,C,CAED;;AACA,OAAM,SAAUG,gBAAV,CACJC,UADI,EAEmB;AAAA,MAAvBC,QAAuB,uEAAF,EAAE;AAEvBD,YAAU,CAAChB,OAAX,CAAoBkB,GAAD,IAAQ;AACzB,QAAI,cAAcA,GAAlB,EAAuB;AACrBH,sBAAgB,CAACG,GAAG,CAACD,QAAL,EAAeA,QAAQ,CAACC,GAAG,CAACd,IAAL,CAAvB,CAAhB;AACD,KAFD,MAEO;AACL,UAAIa,QAAQ,CAACC,GAAG,CAACd,IAAL,CAAR,KAAuBe,SAA3B,EAAsC;AACpC,cAAM,IAAIR,KAAJ,CAAU,sBAAsBO,GAAG,CAACd,IAAI,gBAAxC,CAAN;AACD;AACF;AACF,GARD;AASD,C,CAED;;AACA,OAAM,SAAUgB,gBAAV,CAA2BC,OAA3B,EAA2C;AAC/C,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMC,EAAE,GAAG,IAAI3B,SAAJ,CAAc0B,OAAd,CAAX;AACA,WAAOC,EAAP;AACD,GAHD,MAGO;AACL,WAAOD,OAAP;AACD;AACF","names":["PublicKey","parseIdlErrors","idl","errors","Map","forEach","e","msg","_a","name","set","code","toInstruction","idlIx","args","length","Error","ix","idx","ixArg","validateAccounts","ixAccounts","accounts","acc","undefined","translateAddress","address","pk"],"sourceRoot":"","sources":["../../../src/program/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}