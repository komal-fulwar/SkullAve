{"ast":null,"code":"import * as assert from \"assert\";\nconst LOG_START_INDEX = \"Program log: \".length;\nexport class EventManager {\n  constructor(programId, provider, coder) {\n    this._programId = programId;\n    this._provider = provider;\n    this._eventParser = new EventParser(programId, coder);\n    this._eventCallbacks = new Map();\n    this._eventListeners = new Map();\n    this._listenerIdCount = 0;\n  }\n\n  addEventListener(eventName, callback) {\n    var _a;\n\n    let listener = this._listenerIdCount;\n    this._listenerIdCount += 1; // Store the listener into the event map.\n\n    if (!(eventName in this._eventCallbacks)) {\n      this._eventListeners.set(eventName, []);\n    }\n\n    this._eventListeners.set(eventName, ((_a = this._eventListeners.get(eventName)) !== null && _a !== void 0 ? _a : []).concat(listener)); // Store the callback into the listener map.\n\n\n    this._eventCallbacks.set(listener, [eventName, callback]); // Create the subscription singleton, if needed.\n\n\n    if (this._onLogsSubscriptionId !== undefined) {\n      return listener;\n    }\n\n    this._onLogsSubscriptionId = this._provider.connection.onLogs(this._programId, (logs, ctx) => {\n      if (logs.err) {\n        console.error(logs);\n        return;\n      }\n\n      this._eventParser.parseLogs(logs.logs, event => {\n        const allListeners = this._eventListeners.get(event.name);\n\n        if (allListeners) {\n          allListeners.forEach(listener => {\n            const listenerCb = this._eventCallbacks.get(listener);\n\n            if (listenerCb) {\n              const [, callback] = listenerCb;\n              callback(event.data, ctx.slot);\n            }\n          });\n        }\n      });\n    });\n    return listener;\n  }\n\n  async removeEventListener(listener) {\n    // Get the callback.\n    const callback = this._eventCallbacks.get(listener);\n\n    if (!callback) {\n      throw new Error(`Event listener ${listener} doesn't exist!`);\n    }\n\n    const [eventName] = callback; // Get the listeners.\n\n    let listeners = this._eventListeners.get(eventName);\n\n    if (!listeners) {\n      throw new Error(`Event listeners don't exist for ${eventName}!`);\n    } // Update both maps.\n\n\n    this._eventCallbacks.delete(listener);\n\n    listeners = listeners.filter(l => l !== listener);\n\n    if (listeners.length === 0) {\n      this._eventListeners.delete(eventName);\n    } // Kill the websocket connection if all listeners have been removed.\n\n\n    if (this._eventCallbacks.size == 0) {\n      assert.ok(this._eventListeners.size === 0);\n\n      if (this._onLogsSubscriptionId !== undefined) {\n        await this._provider.connection.removeOnLogsListener(this._onLogsSubscriptionId);\n        this._onLogsSubscriptionId = undefined;\n      }\n    }\n  }\n\n}\nexport class EventParser {\n  constructor(programId, coder) {\n    this.coder = coder;\n    this.programId = programId;\n  } // Each log given, represents an array of messages emitted by\n  // a single transaction, which can execute many different programs across\n  // CPI boundaries. However, the subscription is only interested in the\n  // events emitted by *this* program. In achieving this, we keep track of the\n  // program execution context by parsing each log and looking for a CPI\n  // `invoke` call. If one exists, we know a new program is executing. So we\n  // push the programId onto a stack and switch the program context. This\n  // allows us to track, for a given log, which program was executing during\n  // its emission, thereby allowing us to know if a given log event was\n  // emitted by *this* program. If it was, then we parse the raw string and\n  // emit the event if the string matches the event being subscribed to.\n\n\n  parseLogs(logs, callback) {\n    const logScanner = new LogScanner(logs);\n    const execution = new ExecutionContext(logScanner.next());\n    let log = logScanner.next();\n\n    while (log !== null) {\n      let [event, newProgram, didPop] = this.handleLog(execution, log);\n\n      if (event) {\n        callback(event);\n      }\n\n      if (newProgram) {\n        execution.push(newProgram);\n      }\n\n      if (didPop) {\n        execution.pop();\n      }\n\n      log = logScanner.next();\n    }\n  } // Main log handler. Returns a three element array of the event, the\n  // next program that was invoked for CPI, and a boolean indicating if\n  // a program has completed execution (and thus should be popped off the\n  // execution stack).\n\n\n  handleLog(execution, log) {\n    // Executing program is this program.\n    if (execution.stack.length > 0 && execution.program() === this.programId.toString()) {\n      return this.handleProgramLog(log);\n    } // Executing program is not this program.\n    else {\n      return [null, ...this.handleSystemLog(log)];\n    }\n  } // Handles logs from *this* program.\n\n\n  handleProgramLog(log) {\n    // This is a `msg!` log.\n    if (log.startsWith(\"Program log:\")) {\n      const logStr = log.slice(LOG_START_INDEX);\n      const event = this.coder.events.decode(logStr);\n      return [event, null, false];\n    } // System log.\n    else {\n      return [null, ...this.handleSystemLog(log)];\n    }\n  } // Handles logs when the current program being executing is *not* this.\n\n\n  handleSystemLog(log) {\n    // System component.\n    const logStart = log.split(\":\")[0]; // Did the program finish executing?\n\n    if (logStart.match(/^Program (.*) success/g) !== null) {\n      return [null, true]; // Recursive call.\n    } else if (logStart.startsWith(`Program ${this.programId.toString()} invoke`)) {\n      return [this.programId.toString(), false];\n    } // CPI call.\n    else if (logStart.includes(\"invoke\")) {\n      return [\"cpi\", false]; // Any string will do.\n    } else {\n      return [null, false];\n    }\n  }\n\n} // Stack frame execution context, allowing one to track what program is\n// executing for a given log.\n\nclass ExecutionContext {\n  constructor(log) {\n    var _a; // Assumes the first log in every transaction is an `invoke` log from the\n    // runtime.\n\n\n    const program = (_a = /^Program (.*) invoke.*$/g.exec(log)) === null || _a === void 0 ? void 0 : _a[1];\n\n    if (!program) {\n      throw new Error(`Could not find program invocation log line`);\n    }\n\n    this.stack = [program];\n  }\n\n  program() {\n    assert.ok(this.stack.length > 0);\n    return this.stack[this.stack.length - 1];\n  }\n\n  push(newProgram) {\n    this.stack.push(newProgram);\n  }\n\n  pop() {\n    assert.ok(this.stack.length > 0);\n    this.stack.pop();\n  }\n\n}\n\nclass LogScanner {\n  constructor(logs) {\n    this.logs = logs;\n  }\n\n  next() {\n    if (this.logs.length === 0) {\n      return null;\n    }\n\n    let l = this.logs[0];\n    this.logs = this.logs.slice(1);\n    return l;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assert","LOG_START_INDEX","length","EventManager","constructor","programId","provider","coder","_programId","_provider","_eventParser","EventParser","_eventCallbacks","Map","_eventListeners","_listenerIdCount","addEventListener","eventName","callback","listener","set","get","_a","concat","_onLogsSubscriptionId","undefined","connection","onLogs","logs","ctx","err","console","error","parseLogs","event","allListeners","name","forEach","listenerCb","data","slot","removeEventListener","Error","listeners","delete","filter","l","size","ok","removeOnLogsListener","logScanner","LogScanner","execution","ExecutionContext","next","log","newProgram","didPop","handleLog","push","pop","stack","program","toString","handleProgramLog","handleSystemLog","startsWith","logStr","slice","events","decode","logStart","split","match","includes","exec"],"sourceRoot":"","sources":["../../../src/program/event.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}