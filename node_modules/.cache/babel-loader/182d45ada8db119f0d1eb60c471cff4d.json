{"ast":null,"code":"import camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountSize, AccountsCoder } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\nimport * as rpcUtil from \"../../utils/rpc\";\nexport default class AccountFactory {\n  static build(idl, coder, programId, provider) {\n    var _a;\n\n    const accountFns = {};\n    (_a = idl.accounts) === null || _a === void 0 ? void 0 : _a.forEach(idlAccount => {\n      const name = camelCase(idlAccount.name);\n      accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n    });\n    return accountFns;\n  }\n\n}\nexport class AccountClient {\n  constructor(idl, idlAccount, programId, provider, coder) {\n    var _a;\n\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._size = ACCOUNT_DISCRIMINATOR_SIZE + ((_a = accountSize(idl, idlAccount)) !== null && _a !== void 0 ? _a : 0);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n\n\n  get size() {\n    return this._size;\n  }\n  /**\n   * Returns the program ID owning all accounts.\n   */\n\n\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the client's wallet and network provider.\n   */\n\n\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Returns the coder.\n   */\n\n\n  get coder() {\n    return this._coder;\n  }\n  /**\n   * Returns a deserialized account, returning null if it doesn't exist.\n   *\n   * @param address The address of the account to fetch.\n   */\n\n\n  async fetchNullable(address) {\n    const accountInfo = await this._provider.connection.getAccountInfo(translateAddress(address));\n\n    if (accountInfo === null) {\n      return null;\n    } // Assert the account discriminator is correct.\n\n\n    const discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name);\n\n    if (discriminator.compare(accountInfo.data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n\n    return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);\n  }\n  /**\n   * Returns a deserialized account.\n   *\n   * @param address The address of the account to fetch.\n   */\n\n\n  async fetch(address) {\n    const data = await this.fetchNullable(address);\n\n    if (data === null) {\n      throw new Error(`Account does not exist ${address.toString()}`);\n    }\n\n    return data;\n  }\n  /**\n   * Returns multiple deserialized accounts.\n   * Accounts not found or with wrong discriminator are returned as null.\n   *\n   * @param addresses The addresses of the accounts to fetch.\n   */\n\n\n  async fetchMultiple(addresses) {\n    const accounts = await rpcUtil.getMultipleAccounts(this._provider.connection, addresses.map(address => translateAddress(address)));\n    const discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name); // Decode accounts where discriminator is correct, null otherwise\n\n    return accounts.map(account => {\n      if (account == null) {\n        return null;\n      }\n\n      if (discriminator.compare(account === null || account === void 0 ? void 0 : account.account.data.slice(0, 8))) {\n        return null;\n      }\n\n      return this._coder.accounts.decode(this._idlAccount.name, account === null || account === void 0 ? void 0 : account.account.data);\n    });\n  }\n  /**\n   * Returns all instances of this account type for the program.\n   *\n   * @param filters User-provided filters to narrow the results from `connection.getProgramAccounts`.\n   *\n   *                When filters are not defined this method returns all\n   *                the account instances.\n   *\n   *                When filters are of type `Buffer`, the filters are appended\n   *                after the discriminator.\n   *\n   *                When filters are of type `GetProgramAccountsFilter[]`,\n   *                filters are appended after the discriminator filter.\n   */\n\n\n  async all(filters) {\n    const discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name);\n    let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n      commitment: this._provider.connection.commitment,\n      filters: [{\n        memcmp: {\n          offset: 0,\n          bytes: bs58.encode(filters instanceof Buffer ? Buffer.concat([discriminator, filters]) : discriminator)\n        }\n      }, ...(Array.isArray(filters) ? filters : [])]\n    });\n    return resp.map(_ref => {\n      let {\n        pubkey,\n        account\n      } = _ref;\n      return {\n        publicKey: pubkey,\n        account: this._coder.accounts.decode(this._idlAccount.name, account.data)\n      };\n    });\n  }\n  /**\n   * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n   * changes.\n   */\n\n\n  subscribe(address, commitment) {\n    const sub = subscriptions.get(address.toString());\n\n    if (sub) {\n      return sub.ee;\n    }\n\n    const ee = new EventEmitter();\n    address = translateAddress(address);\n\n    const listener = this._provider.connection.onAccountChange(address, acc => {\n      const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n\n      ee.emit(\"change\", account);\n    }, commitment);\n\n    subscriptions.set(address.toString(), {\n      ee,\n      listener\n    });\n    return ee;\n  }\n  /**\n   * Unsubscribes from the account at the given address.\n   */\n\n\n  async unsubscribe(address) {\n    let sub = subscriptions.get(address.toString());\n\n    if (!sub) {\n      console.warn(\"Address is not subscribed\");\n      return;\n    }\n\n    if (subscriptions) {\n      await this._provider.connection.removeAccountChangeListener(sub.listener).then(() => {\n        subscriptions.delete(address.toString());\n      }).catch(console.error);\n    }\n  }\n  /**\n   * Returns an instruction for creating this account.\n   */\n\n\n  async createInstruction(signer, sizeOverride) {\n    const size = this.size;\n    return SystemProgram.createAccount({\n      fromPubkey: this._provider.wallet.publicKey,\n      newAccountPubkey: signer.publicKey,\n      space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n      lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n      programId: this._programId\n    });\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated account. Args are keys to associate.\n   * Order matters.\n   */\n\n\n  async associated() {\n    const addr = await this.associatedAddress(...arguments);\n    return await this.fetch(addr);\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated address. Args are keys to associate.\n   * Order matters.\n   */\n\n\n  async associatedAddress() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return await pubkeyUtil.associated(this._programId, ...args);\n  }\n\n} // Tracks all subscriptions.\n\nconst subscriptions = new Map();","map":{"version":3,"mappings":"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","names":["camelCase","EventEmitter","bs58","SystemProgram","Coder","ACCOUNT_DISCRIMINATOR_SIZE","accountSize","AccountsCoder","translateAddress","getProvider","pubkeyUtil","rpcUtil","AccountFactory","build","idl","coder","programId","provider","accountFns","accounts","_a","forEach","idlAccount","name","AccountClient","constructor","_idlAccount","_programId","_provider","_coder","_size","size","fetchNullable","address","accountInfo","connection","getAccountInfo","discriminator","accountDiscriminator","compare","data","slice","Error","decode","fetch","toString","fetchMultiple","addresses","getMultipleAccounts","map","account","all","filters","resp","getProgramAccounts","commitment","memcmp","offset","bytes","encode","Buffer","concat","Array","isArray","pubkey","publicKey","subscribe","sub","subscriptions","get","ee","listener","onAccountChange","acc","emit","set","unsubscribe","console","warn","removeAccountChangeListener","then","delete","catch","error","createInstruction","signer","sizeOverride","createAccount","fromPubkey","wallet","newAccountPubkey","space","lamports","getMinimumBalanceForRentExemption","associated","addr","associatedAddress","args","Map"],"sourceRoot":"","sources":["../../../../src/program/namespace/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}