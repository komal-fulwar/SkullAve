{"ast":null,"code":"import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport class AccountsCoder {\n  constructor(idl) {\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    const layouts = idl.accounts.map(acc => {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  async encode(accountName, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const layout = this.accountLayouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n\n    const len = layout.encode(account, buffer);\n    let accountData = buffer.slice(0, len);\n    let discriminator = AccountsCoder.accountDiscriminator(accountName);\n    return Buffer.concat([discriminator, accountData]);\n  }\n\n  decode(accountName, ix) {\n    // Chop off the discriminator before decoding.\n    const data = ix.slice(8);\n    const layout = this.accountLayouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n\n    return layout.decode(data);\n  }\n  /**\n   * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n   *\n   * @param name The name of the account to calculate the discriminator.\n   */\n\n\n  static accountDiscriminator(name) {\n    return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA;;;;AAGA,OAAO,MAAMC,0BAA0B,GAAG,CAAnC;AAEP;;;;AAGA,OAAM,MAAOC,aAAP,CAAoB;AAMxBC,cAAmBC,GAAnB,EAA2B;AACzB,QAAIA,GAAG,CAACC,QAAJ,KAAiBC,SAArB,EAAgC;AAC9B,WAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA;AACD;;AACD,UAAMC,OAAO,GAAkBL,GAAG,CAACC,QAAJ,CAAaK,GAAb,CAAkBC,GAAD,IAAQ;AACtD,aAAO,CAACA,GAAG,CAACC,IAAL,EAAgBb,QAAQ,CAACc,aAAT,CAAuBF,GAAvB,EAA4BP,GAAG,CAACU,KAAhC,CAAhB,CAAP;AACD,KAF8B,CAA/B;AAIA,SAAKP,cAAL,GAAsB,IAAIC,GAAJ,CAAQC,OAAR,CAAtB;AACD;;AAEkB,QAANM,MAAM,CAAUC,WAAV,EAA0BC,OAA1B,EAAoC;AACrD,UAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAb,CAAf,CADqD,CAClB;;AACnC,UAAMC,MAAM,GAAG,KAAKd,cAAL,CAAoBe,GAApB,CAAwBN,WAAxB,CAAf;;AACA,QAAI,CAACK,MAAL,EAAa;AACX,YAAM,IAAIE,KAAJ,CAAU,oBAAoBP,WAAW,EAAzC,CAAN;AACD;;AACD,UAAMQ,GAAG,GAAGH,MAAM,CAACN,MAAP,CAAcE,OAAd,EAAuBC,MAAvB,CAAZ;AACA,QAAIO,WAAW,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgBF,GAAhB,CAAlB;AACA,QAAIG,aAAa,GAAGzB,aAAa,CAAC0B,oBAAd,CAAmCZ,WAAnC,CAApB;AACA,WAAOG,MAAM,CAACU,MAAP,CAAc,CAACF,aAAD,EAAgBF,WAAhB,CAAd,CAAP;AACD;;AAEMK,QAAM,CAAUd,WAAV,EAA0Be,EAA1B,EAAoC;AAC/C;AACA,UAAMC,IAAI,GAAGD,EAAE,CAACL,KAAH,CAAS,CAAT,CAAb;AACA,UAAML,MAAM,GAAG,KAAKd,cAAL,CAAoBe,GAApB,CAAwBN,WAAxB,CAAf;;AACA,QAAI,CAACK,MAAL,EAAa;AACX,YAAM,IAAIE,KAAJ,CAAU,oBAAoBP,WAAW,EAAzC,CAAN;AACD;;AACD,WAAOK,MAAM,CAACS,MAAP,CAAcE,IAAd,CAAP;AACD;AAED;;;;;;;AAKkC,SAApBJ,oBAAoB,CAAChB,IAAD,EAAa;AAC7C,WAAOO,MAAM,CAACc,IAAP,CAAYjC,MAAM,CAACkC,MAAP,CAAc,WAAWtB,IAAI,EAA7B,CAAZ,EAA8Cc,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CAAP;AACD;;AA/CuB","names":["IdlCoder","sha256","ACCOUNT_DISCRIMINATOR_SIZE","AccountsCoder","constructor","idl","accounts","undefined","accountLayouts","Map","layouts","map","acc","name","typeDefLayout","types","encode","accountName","account","buffer","Buffer","alloc","layout","get","Error","len","accountData","slice","discriminator","accountDiscriminator","concat","decode","ix","data","from","digest"],"sourceRoot":"","sources":["../../../src/coder/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}