{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport camelCase from \"camelcase\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { stateDiscriminator } from \"../../coder\";\nimport { getProvider } from \"../../\";\nimport { validateAccounts, parseIdlErrors } from \"../common\";\nimport { findProgramAddressSync, createWithSeedSync } from \"../../utils/pubkey\";\nimport InstructionNamespaceFactory from \"./instruction\";\nimport RpcNamespaceFactory from \"./rpc\";\nimport TransactionNamespaceFactory from \"./transaction\";\nexport default class StateFactory {\n  static build(idl, coder, programId, provider) {\n    if (idl.state === undefined) {\n      return undefined;\n    }\n\n    return new StateClient(idl, programId, provider, coder);\n  }\n\n}\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */\n\nexport class StateClient {\n  constructor(idl, programId) {\n    let provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getProvider();\n    let coder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Coder(idl);\n    this.provider = provider;\n    this.coder = coder;\n    this._idl = idl;\n    this._programId = programId;\n    this._address = programStateAddress(programId);\n    this._sub = null; // Build namespaces.\n\n    const [instruction, transaction, rpc] = (() => {\n      var _a;\n\n      let instruction = {};\n      let transaction = {};\n      let rpc = {};\n      (_a = idl.state) === null || _a === void 0 ? void 0 : _a.methods.forEach(m => {\n        // Build instruction method.\n        const ixItem = InstructionNamespaceFactory.build(m, (ixName, ix) => coder.instruction.encodeState(ixName, ix), programId);\n\n        ixItem[\"accounts\"] = accounts => {\n          const keys = stateInstructionKeys(programId, provider, m, accounts);\n          return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));\n        }; // Build transaction method.\n\n\n        const txItem = TransactionNamespaceFactory.build(m, ixItem); // Build RPC method.\n\n        const rpcItem = RpcNamespaceFactory.build(m, txItem, parseIdlErrors(idl), provider); // Attach them all to their respective namespaces.\n\n        const name = camelCase(m.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n      });\n      return [instruction, transaction, rpc];\n    })();\n\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.rpc = rpc;\n  }\n  /**\n   * Returns the program ID owning the state.\n   */\n\n\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the deserialized state account.\n   */\n\n\n  async fetch() {\n    const addr = this.address();\n    const accountInfo = await this.provider.connection.getAccountInfo(addr);\n\n    if (accountInfo === null) {\n      throw new Error(`Account does not exist ${addr.toString()}`);\n    } // Assert the account discriminator is correct.\n\n\n    const state = this._idl.state;\n\n    if (!state) {\n      throw new Error(\"State is not specified in IDL.\");\n    }\n\n    const expectedDiscriminator = await stateDiscriminator(state.struct.name);\n\n    if (expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n\n    return this.coder.state.decode(accountInfo.data);\n  }\n  /**\n   * Returns the state address.\n   */\n\n\n  address() {\n    return this._address;\n  }\n  /**\n   * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n   * the state account cahnges.\n   */\n\n\n  subscribe(commitment) {\n    if (this._sub !== null) {\n      return this._sub.ee;\n    }\n\n    const ee = new EventEmitter();\n    const listener = this.provider.connection.onAccountChange(this.address(), acc => {\n      const account = this.coder.state.decode(acc.data);\n      ee.emit(\"change\", account);\n    }, commitment);\n    this._sub = {\n      ee,\n      listener\n    };\n    return ee;\n  }\n  /**\n   * Unsubscribes to state changes.\n   */\n\n\n  unsubscribe() {\n    if (this._sub !== null) {\n      this.provider.connection.removeAccountChangeListener(this._sub.listener).then(async () => {\n        this._sub = null;\n      }).catch(console.error);\n    }\n  }\n\n} // Calculates the deterministic address of the program's \"state\" account.\n\nfunction programStateAddress(programId) {\n  let [registrySigner] = findProgramAddressSync([], programId);\n  return createWithSeedSync(registrySigner, \"unversioned\", programId);\n} // Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\n\n\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n  if (m.name === \"new\") {\n    // Ctor `new` method.\n    const [programSigner] = findProgramAddressSync([], programId);\n    return [{\n      pubkey: provider.wallet.publicKey,\n      isWritable: false,\n      isSigner: true\n    }, {\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programSigner,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: programId,\n      isWritable: false,\n      isSigner: false\n    }];\n  } else {\n    validateAccounts(m.accounts, accounts);\n    return [{\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }];\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","camelCase","SystemProgram","Coder","stateDiscriminator","getProvider","validateAccounts","parseIdlErrors","findProgramAddressSync","createWithSeedSync","InstructionNamespaceFactory","RpcNamespaceFactory","TransactionNamespaceFactory","StateFactory","build","idl","coder","programId","provider","state","undefined","StateClient","constructor","_idl","_programId","_address","programStateAddress","_sub","instruction","transaction","rpc","_a","methods","forEach","m","ixItem","ixName","ix","encodeState","accounts","keys","stateInstructionKeys","concat","accountsArray","txItem","rpcItem","name","fetch","addr","address","accountInfo","connection","getAccountInfo","Error","toString","expectedDiscriminator","struct","compare","data","slice","decode","subscribe","commitment","ee","listener","onAccountChange","acc","account","emit","unsubscribe","removeAccountChangeListener","then","catch","console","error","registrySigner","programSigner","pubkey","wallet","publicKey","isWritable","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/state.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}